// Generated by CoffeeScript 1.6.3
(function() {
  this.AjaxPrefix = {
    addAjaxPrefix: function(jQuery, prefix) {
      jQuery.postWithPrefix = function(url, data, callback, type) {
        return $.post("" + (prefix()) + url, data, callback, type);
      };
      jQuery.getWithPrefix = function(url, data, callback, type) {
        return $.get("" + (prefix()) + url, data, callback, type);
      };
      return jQuery.ajaxWithPrefix = function(url, settings) {
        if (settings != null) {
          return $.ajax("" + (prefix()) + url, settings);
        } else {
          settings = url;
          settings.url = "" + (prefix()) + settings.url;
          return $.ajax(settings);
        }
      };
    }
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  jQuery.fn.immediateDescendents = function(selector) {
    return this.children().map(function() {
      var elem;
      elem = jQuery(this);
      if (elem.is(selector)) {
        return this;
      } else {
        return elem.immediateDescendents(selector).get();
      }
    });
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Logger = (function() {
    var listeners;

    function Logger() {}

    listeners = {};

    Logger.log = function(event_type, data, element) {
      var callback, _i, _j, _len, _len1, _ref, _ref1;
      if (element == null) {
        element = null;
      }
      if (event_type in listeners) {
        if (null in listeners[event_type]) {
          _ref = listeners[event_type][null];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            callback(event_type, data, element);
          }
        } else if (element in listeners[event_type]) {
          _ref1 = listeners[event_type][element];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            callback = _ref1[_j];
            callback(event_type, data, element);
          }
        }
      }
      return $.postWithPrefix('/event', {
        event_type: event_type,
        event: JSON.stringify(data),
        page: window.location.href
      });
    };

    Logger.listen = function(event_type, element, callback) {
      if (!(event_type in listeners)) {
        listeners[event_type] = {};
      }
      if (!(element in listeners[event_type])) {
        return listeners[event_type][element] = [callback];
      } else {
        return listeners[event_type][element].push(callback);
      }
    };

    Logger.bind = function() {
      return window.onunload = function() {
        return $.ajaxWithPrefix({
          url: "/event",
          data: {
            event_type: 'page_close',
            event: '',
            page: window.location.href
          },
          async: false
        });
      };
    };

    return Logger;

  })();

  this.log_event = Logger.log;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.XBlock = {
    Runtime: {},
    /*
    Initialize the javascript for a single xblock element, and for all of it's
    xblock children that match requestToken. If requestToken is omitted, use the
    data-request-token attribute from element, or use the request-tokens specified on
    the children themselves.
    */

    initializeBlock: function(element, requestToken) {
      var $element, block, children, elementTag, initFn, initFnName, runtime, version, _ref;
      $element = $(element);
      requestToken = requestToken || $element.data('request-token');
      children = this.initializeBlocks($element, requestToken);
      runtime = $element.data("runtime-class");
      version = $element.data("runtime-version");
      initFnName = $element.data("init");
      $element.prop('xblock_children', children);
      if ((runtime != null) && (version != null) && (initFnName != null)) {
        runtime = new window[runtime]["v" + version];
        initFn = window[initFnName];
        block = (_ref = initFn(runtime, element)) != null ? _ref : {};
        block.runtime = runtime;
      } else {
        elementTag = $('<div>').append($element.clone()).html();
        console.log("Block " + elementTag + " is missing data-runtime, data-runtime-version or data-init, and can't be initialized");
        block = {};
      }
      block.element = element;
      block.name = $element.data("name");
      $element.trigger("xblock-initialized");
      $element.data("initialized", true);
      $element.addClass("xblock-initialized");
      return block;
    },
    /*
    Initialize all XBlocks inside element that were rendered with requestToken.
    If requestToken is omitted, and element has a 'data-request-token' attribute, use that.
    If neither is available, then use the request tokens of the immediateDescendent xblocks.
    */

    initializeBlocks: function(element, requestToken) {
      var selector,
        _this = this;
      requestToken = requestToken || $(element).data('request-token');
      if (requestToken) {
        selector = ".xblock[data-request-token='" + requestToken + "']";
      } else {
        selector = ".xblock";
      }
      return $(element).immediateDescendents(selector).map(function(idx, elem) {
        return _this.initializeBlock(elem, requestToken);
      }).toArray();
    }
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  XBlock.Runtime.v1 = (function() {
    function v1() {
      this.childMap = __bind(this.childMap, this);
      this.children = __bind(this.children, this);
    }

    v1.prototype.children = function(block) {
      return $(block).prop('xblock_children');
    };

    v1.prototype.childMap = function(block, childName) {
      var child, _i, _len, _ref;
      _ref = this.children(block);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.name === childName) {
          return child;
        }
      }
    };

    v1.prototype.notify = function(name, data) {
      return void 0;
    };

    return v1;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var XProblemDisplay, XProblemGenerator, XProblemGrader, root;

  XProblemGenerator = (function() {
    function XProblemGenerator(seed, parameters) {
      this.parameters = parameters != null ? parameters : {};
      this.random = new MersenneTwister(seed);
      this.problemState = {};
    }

    XProblemGenerator.prototype.generate = function() {
      return console.error("Abstract method called: XProblemGenerator.generate");
    };

    return XProblemGenerator;

  })();

  XProblemDisplay = (function() {
    function XProblemDisplay(state, submission, evaluation, container, submissionField, parameters) {
      this.state = state;
      this.submission = submission;
      this.evaluation = evaluation;
      this.container = container;
      this.submissionField = submissionField;
      this.parameters = parameters != null ? parameters : {};
    }

    XProblemDisplay.prototype.render = function() {
      return console.error("Abstract method called: XProblemDisplay.render");
    };

    XProblemDisplay.prototype.updateSubmission = function() {
      return this.submissionField.val(JSON.stringify(this.getCurrentSubmission()));
    };

    XProblemDisplay.prototype.getCurrentSubmission = function() {
      return console.error("Abstract method called: XProblemDisplay.getCurrentSubmission");
    };

    return XProblemDisplay;

  })();

  XProblemGrader = (function() {
    function XProblemGrader(submission, problemState, parameters) {
      this.submission = submission;
      this.problemState = problemState;
      this.parameters = parameters != null ? parameters : {};
      this.solution = null;
      this.evaluation = {};
    }

    XProblemGrader.prototype.solve = function() {
      return console.error("Abstract method called: XProblemGrader.solve");
    };

    XProblemGrader.prototype.grade = function() {
      return console.error("Abstract method called: XProblemGrader.grade");
    };

    return XProblemGrader;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.XProblemGenerator = XProblemGenerator;

  root.XProblemDisplay = XProblemDisplay;

  root.XProblemGrader = XProblemGrader;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Calculator = (function() {
    function Calculator() {
      this.hintButton = $('#calculator_hint');
      this.hintPopup = $('.help');
      this.hintsList = this.hintPopup.find('.hint-item');
      this.selectHint($('#' + this.hintPopup.attr('aria-activedescendant')));
      $('.calc').click(this.toggle);
      $('form#calculator').submit(this.calculate).submit(function(e) {
        return e.preventDefault();
      });
      this.hintButton.hover($.proxy(this.showHint, this), $.proxy(this.hideHint, this)).keydown($.proxy(this.handleKeyDown, this)).click(function(e) {
        return e.preventDefault();
      });
      this.hintPopup.keydown($.proxy(this.handleKeyDownOnHint, this));
      this.handleClickOnDocument = $.proxy(this.handleClickOnDocument, this);
    }

    Calculator.prototype.KEY = {
      TAB: 9,
      ENTER: 13,
      ESC: 27,
      SPACE: 32,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40
    };

    Calculator.prototype.toggle = function(event) {
      var $calc, $calcWrapper, isExpanded, text;
      event.preventDefault();
      $calc = $('.calc');
      $calcWrapper = $('#calculator_wrapper');
      text = gettext('Open Calculator');
      isExpanded = false;
      $('div.calc-main').toggleClass('open');
      if ($calc.hasClass('closed')) {
        $calcWrapper.find('input, a').attr('tabindex', -1);
      } else {
        text = gettext('Close Calculator');
        isExpanded = true;
        $calcWrapper.find('input, a,').attr('tabindex', 0);
        setTimeout((function() {
          return $calcWrapper.find('#calculator_input').focus();
        }), 100);
      }
      $calc.attr({
        'title': text,
        'aria-expanded': isExpanded
      }).text(text);
      return $calc.toggleClass('closed');
    };

    Calculator.prototype.showHint = function() {
      this.hintPopup.addClass('shown').attr('aria-hidden', false);
      return $(document).on('click', this.handleClickOnDocument);
    };

    Calculator.prototype.hideHint = function() {
      this.hintPopup.removeClass('shown').attr('aria-hidden', true);
      return $(document).off('click', this.handleClickOnDocument);
    };

    Calculator.prototype.selectHint = function(element) {
      if (!element || (element && element.length === 0)) {
        element = this.hintsList.first();
      }
      this.activeHint = element;
      this.activeHint.focus();
      return this.hintPopup.attr('aria-activedescendant', element.attr('id'));
    };

    Calculator.prototype.prevHint = function() {
      var prev;
      prev = this.activeHint.prev();
      if (this.activeHint.index() === 0) {
        prev = this.hintsList.last();
      }
      return this.selectHint(prev);
    };

    Calculator.prototype.nextHint = function() {
      var next;
      next = this.activeHint.next();
      if (this.activeHint.index() === this.hintsList.length - 1) {
        next = this.hintsList.first();
      }
      return this.selectHint(next);
    };

    Calculator.prototype.handleKeyDown = function(e) {
      if (e.altKey) {
        return true;
      }
      if (e.keyCode === this.KEY.ENTER || e.keyCode === this.KEY.SPACE) {
        if (this.hintPopup.hasClass('shown')) {
          this.hideHint();
        } else {
          this.showHint();
          this.activeHint.focus();
        }
        e.preventDefault();
        return false;
      }
      return true;
    };

    Calculator.prototype.handleKeyDownOnHint = function(e) {
      if (e.altKey) {
        return true;
      }
      switch (e.keyCode) {
        case this.KEY.TAB:
          this.hideHint();
          break;
        case this.KEY.ESC:
          this.hideHint();
          this.hintButton.focus();
          e.stopPropagation();
          return false;
        case this.KEY.LEFT:
        case this.KEY.UP:
          if (e.shiftKey) {
            return true;
          }
          this.prevHint();
          e.stopPropagation();
          return false;
        case this.KEY.RIGHT:
        case this.KEY.DOWN:
          if (e.shiftKey) {
            return true;
          }
          this.nextHint();
          e.stopPropagation();
          return false;
      }
      return true;
    };

    Calculator.prototype.handleClickOnDocument = function(e) {
      this.hideHint();
      return true;
    };

    Calculator.prototype.calculate = function() {
      return $.getWithPrefix('/calculate', {
        equation: $('#calculator_input').val()
      }, function(data) {
        return $('#calculator_output').val(data.result).focus();
      });
    };

    return Calculator;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var HUB, MathJaxProcessor;
    if (typeof MathJax === "undefined" || MathJax === null) {
      return;
    }
    HUB = MathJax.Hub;
    MathJaxProcessor = (function() {
      var CODESPAN, MATHSPLIT;

      MATHSPLIT = /(\$\$?|\\(?:begin|end)\{[a-z]*\*?\}|\\[\\{}$]|[{}]|(?:\n\s*)+|@@\d+@@)/i;

      CODESPAN = /(^|[^\\])(`+)([^\n]*?[^`\n])\2(?!`)/gm;

      function MathJaxProcessor(inlineMark, displayMark) {
        this.inlineMark = inlineMark || "$";
        this.displayMark = displayMark || "$$";
        this.math = null;
        this.blocks = null;
      }

      MathJaxProcessor.prototype.processMath = function(start, last, preProcess) {
        var block, i, _i, _ref;
        block = this.blocks.slice(start, last + 1).join("").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        if (HUB.Browser.isMSIE) {
          block = block.replace(/(%[^\n]*)\n/g, "$1<br/>\n");
        }
        for (i = _i = _ref = start + 1; _ref <= last ? _i <= last : _i >= last; i = _ref <= last ? ++_i : --_i) {
          this.blocks[i] = "";
        }
        this.blocks[start] = "@@" + this.math.length + "@@";
        if (preProcess) {
          block = preProcess(block);
        }
        return this.math.push(block);
      };

      MathJaxProcessor.prototype.removeMath = function(text) {
        var block, braces, current, deTilde, end, hasCodeSpans, last, start, _i, _ref;
        text = text || "";
        this.math = [];
        start = end = last = null;
        braces = 0;
        hasCodeSpans = /`/.test(text);
        if (hasCodeSpans) {
          text = text.replace(/~/g, "~T").replace(CODESPAN, function($0) {
            return $0.replace(/\$/g, "~D");
          });
          deTilde = function(text) {
            return text.replace(/~([TD])/g, function($0, $1) {
              return {
                T: "~",
                D: "$"
              }[$1];
            });
          };
        } else {
          deTilde = function(text) {
            return text;
          };
        }
        this.blocks = _split(text.replace(/\r\n?/g, "\n"), MATHSPLIT);
        for (current = _i = 1, _ref = this.blocks.length; _i < _ref; current = _i += 2) {
          block = this.blocks[current];
          if (block.charAt(0) === "@") {
            this.blocks[current] = "@@" + this.math.length + "@@";
            this.math.push(block);
          } else if (start) {
            if (block === end) {
              if (braces) {
                last = current;
              } else {
                this.processMath(start, current, deTilde);
                start = end = last = null;
              }
            } else if (block.match(/\n.*\n/)) {
              if (last) {
                current = last;
                this.processMath(start, current, deTilde);
              }
              start = end = last = null;
              braces = 0;
            } else if (block === "{") {
              ++braces;
            } else if (block === "}" && braces) {
              --braces;
            }
          } else {
            if (block === this.inlineMark || block === this.displayMark) {
              start = current;
              end = block;
              braces = 0;
            } else if (block.substr(1, 5) === "begin") {
              start = current;
              end = "\\end" + block.substr(6);
              braces = 0;
            }
          }
        }
        if (last) {
          this.processMath(start, last, deTilde);
          start = end = last = null;
        }
        return deTilde(this.blocks.join(""));
      };

      MathJaxProcessor.removeMathWrapper = function(_this) {
        return function(text) {
          return _this.removeMath(text);
        };
      };

      MathJaxProcessor.prototype.replaceMath = function(text) {
        var _this = this;
        text = text.replace(/@@(\d+)@@/g, function($0, $1) {
          return _this.math[$1];
        });
        this.math = null;
        return text;
      };

      MathJaxProcessor.replaceMathWrapper = function(_this) {
        return function(text) {
          return _this.replaceMath(text);
        };
      };

      return MathJaxProcessor;

    })();
    if (typeof Markdown !== "undefined" && Markdown !== null) {
      Markdown.getMathCompatibleConverter = function(postProcessor) {
        var converter, processor;
        postProcessor || (postProcessor = (function(text) {
          return text;
        }));
        converter = Markdown.getSanitizingConverter();
        processor = new MathJaxProcessor();
        converter.hooks.chain("preConversion", MathJaxProcessor.removeMathWrapper(processor));
        converter.hooks.chain("postConversion", function(text) {
          return postProcessor(MathJaxProcessor.replaceMathWrapper(processor)(text));
        });
        return converter;
      };
      return Markdown.makeWmdEditor = function(elem, appended_id, imageUploadUrl, postProcessor) {
        var $elem, $wmdPanel, $wmdPreviewContainer, ajaxFileUpload, converter, delayRenderer, editor, imageUploadHandler, initialText, wmdInputId, _append;
        $elem = $(elem);
        if (!$elem.length) {
          console.log("warning: elem for makeWmdEditor doesn't exist");
          return;
        }
        if (!$elem.find(".wmd-panel").length) {
          initialText = $elem.html();
          $elem.empty();
          _append = appended_id || "";
          wmdInputId = "wmd-input" + _append;
          $wmdPreviewContainer = $("<div>").addClass("wmd-preview-container").append($("<div>").addClass("wmd-preview-label").text(gettext("Preview"))).append($("<div>").attr("id", "wmd-preview" + _append).addClass("wmd-panel wmd-preview"));
          $wmdPanel = $("<div>").addClass("wmd-panel").append($("<div>").attr("id", "wmd-button-bar" + _append)).append($("<label>").addClass("sr").attr("for", wmdInputId).text(gettext("Post body"))).append($("<textarea>").addClass("wmd-input").attr("id", wmdInputId).html(initialText)).append($wmdPreviewContainer);
          $elem.append($wmdPanel);
        }
        converter = Markdown.getMathCompatibleConverter(postProcessor);
        ajaxFileUpload = function(imageUploadUrl, input, startUploadHandler) {
          $("#loading").ajaxStart(function() {
            return $(this).show();
          }).ajaxComplete(function() {
            return $(this).hide();
          });
          $("#upload").ajaxStart(function() {
            return $(this).hide();
          }).ajaxComplete(function() {
            return $(this).show();
          });
          return $.ajaxFileUpload({
            url: imageUploadUrl,
            secureuri: false,
            fileElementId: 'file-upload',
            dataType: 'json',
            success: function(data, status) {
              var error, fileURL;
              fileURL = data['result']['file_url'];
              error = data['result']['error'];
              if (error !== '') {
                alert(error);
                if (startUploadHandler) {
                  $('#file-upload').unbind('change').change(startUploadHandler);
                }
                return console.log(error);
              } else {
                return $(input).attr('value', fileURL);
              }
            },
            error: function(data, status, e) {
              alert(e);
              if (startUploadHandler) {
                return $('#file-upload').unbind('change').change(startUploadHandler);
              }
            }
          });
        };
        imageUploadHandler = function(elem, input) {
          return ajaxFileUpload(imageUploadUrl, input, imageUploadHandler);
        };
        editor = new Markdown.Editor(converter, appended_id, null, imageUploadHandler);
        delayRenderer = new MathJaxDelayRenderer();
        editor.hooks.chain("onPreviewPush", function(text, previewSet) {
          return delayRenderer.render({
            text: text,
            previewSetter: previewSet
          });
        });
        editor.run();
        return editor;
      };
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.FeedbackForm = (function() {
    function FeedbackForm() {
      $('#feedback_button').click(function() {
        var data;
        data = {
          subject: $('#feedback_subject').val(),
          message: $('#feedback_message').val(),
          url: window.location.href
        };
        return $.postWithPrefix('/send_feedback', data, function() {
          return $('#feedback_div').html('Feedback submitted. Thank you');
        }, 'json');
      });
    }

    return FeedbackForm;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  AjaxPrefix.addAjaxPrefix(jQuery, function() {
    return Courseware.prefix;
  });

  $(function() {
    $.ajaxSetup({
      headers: {
        'X-CSRFToken': $.cookie('csrftoken')
      },
      dataType: 'json'
    });
    window.onTouchBasedDevice = function() {
      return navigator.userAgent.match(/iPhone|iPod|iPad|Android/i);
    };
    if (onTouchBasedDevice()) {
      $('body').addClass('touch-based-device');
    }
    $('#csrfmiddlewaretoken').attr('value', $.cookie('csrftoken'));
    new Calculator;
    new FeedbackForm;
    if ($('body').hasClass('courseware')) {
      Courseware.start();
    }
    window.submit_circuit = function(circuit_id) {
      $("input.schematic").each(function(index, el) {
        return el.schematic.update_value();
      });
      schematic_value($("#schematic_" + circuit_id).attr("value"));
      return $.postWithPrefix("/save_circuit/" + circuit_id, {
        schematic: schematic_value
      }, function(data) {
        if (data.results === 'success') {
          return alert('Saved');
        }
      });
    };
    window.postJSON = function(url, data, callback) {
      return $.postWithPrefix(url, data, callback);
    };
    $('#login').click(function() {
      $('#login_form input[name="email"]').focus();
      return false;
    });
    $('#signup').click(function() {
      $('#signup-modal input[name="email"]').focus();
      return false;
    });
    if (!Array.prototype.indexOf) {
      return Array.prototype.indexOf = function(obj, start) {
        var ele, i, _i, _len, _ref;
        if (start == null) {
          start = 0;
        }
        _ref = this.slice(start);
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          ele = _ref[i];
          if (ele === obj) {
            return i + start;
          }
        }
        return -1;
      };
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var isMPInstalled;
    if (window.navigator.appName === "Microsoft Internet Explorer") {
      isMPInstalled = function(boolean) {
        var e, oMP;
        try {
          oMP = new ActiveXObject("MathPlayer.Factory.1");
          return true;
        } catch (_error) {
          e = _error;
          return false;
        }
      };
      if ((typeof MathJax !== "undefined" && MathJax !== null) && !isMPInstalled()) {
        $("#mathjax-accessibility-message").attr("aria-hidden", "false");
      }
      if ((typeof MathJax !== "undefined" && MathJax !== null) && $("#mathplayer-browser-message").length > 0) {
        return $("#mathplayer-browser-message").attr("aria-hidden", "false");
      } else {
        return $("#mathjax-accessibility-message").attr("aria-hidden", "true");
      }
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var getTime;

  getTime = function() {
    return new Date().getTime();
  };

  this.MathJaxDelayRenderer = (function() {
    var bufferId, numBuffers;

    MathJaxDelayRenderer.prototype.maxDelay = 3000;

    MathJaxDelayRenderer.prototype.mathjaxRunning = false;

    MathJaxDelayRenderer.prototype.elapsedTime = 0;

    MathJaxDelayRenderer.prototype.mathjaxDelay = 0;

    MathJaxDelayRenderer.prototype.mathjaxTimeout = void 0;

    bufferId = "mathjax_delay_buffer";

    numBuffers = 0;

    function MathJaxDelayRenderer(params) {
      params = params || {};
      this.maxDelay = params["maxDelay"] || this.maxDelay;
      this.bufferId = params["bufferId"] || (bufferId + numBuffers);
      numBuffers += 1;
      this.$buffer = $("<div>").attr("id", this.bufferId).css("display", "none").appendTo($("body"));
    }

    MathJaxDelayRenderer.prototype.render = function(params) {
      var delay, elem, preprocessor, previewSetter, renderer, text,
        _this = this;
      elem = params["element"];
      previewSetter = params["previewSetter"];
      text = params["text"];
      if (text == null) {
        text = $(elem).html();
      }
      preprocessor = params["preprocessor"];
      if (params["delay"] === false) {
        if (preprocessor != null) {
          text = preprocessor(text);
        }
        $(elem).html(text);
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, $(elem).attr("id")]);
      } else {
        if (this.mathjaxTimeout) {
          window.clearTimeout(this.mathjaxTimeout);
          this.mathjaxTimeout = void 0;
        }
        delay = Math.min(this.elapsedTime + this.mathjaxDelay, this.maxDelay);
        renderer = function() {
          var curTime, prevTime;
          if (_this.mathjaxRunning) {
            return;
          }
          prevTime = getTime();
          if (preprocessor != null) {
            text = preprocessor(text);
          }
          _this.$buffer.html(text);
          curTime = getTime();
          _this.elapsedTime = curTime - prevTime;
          if (MathJax) {
            prevTime = getTime();
            _this.mathjaxRunning = true;
            return MathJax.Hub.Queue(["Typeset", MathJax.Hub, _this.$buffer.attr("id")], function() {
              _this.mathjaxRunning = false;
              curTime = getTime();
              _this.mathjaxDelay = curTime - prevTime;
              if (previewSetter) {
                return previewSetter($(_this.$buffer).html());
              } else {
                return $(elem).html($(_this.$buffer).html());
              }
            });
          } else {
            return _this.mathjaxDelay = 0;
          }
        };
        return this.mathjaxTimeout = window.setTimeout(renderer, delay);
      }
    };

    return MathJaxDelayRenderer;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var StudentNotes,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StudentNotes = (function() {
    StudentNotes.prototype._debug = false;

    StudentNotes.prototype.targets = [];

    function StudentNotes($, el) {
      this.onInitNotes = __bind(this.onInitNotes, this);
      var events;
      if (this._debug) {
        console.log('student notes init', arguments, this);
      }
      if (!$(el).data('notes-instance')) {
        events = {
          'notes:init': this.onInitNotes
        };
        $(el).delegate('*', events);
        $(el).data('notes-instance', this);
      }
    }

    StudentNotes.prototype.onInitNotes = function(event, uri, storage_url, token) {
      var courseid, found, idDUdiv, idUdiv, options, ova, parts, uri_root;
      if (uri == null) {
        uri = null;
      }
      if (storage_url == null) {
        storage_url = null;
      }
      if (token == null) {
        token = null;
      }
      event.stopPropagation();
      found = this.targets.some(function(target) {
        return target === event.target;
      });
      if (uri.substring(0, 4) !== "http") {
        uri_root = window.location.href.split(/#|\?/).shift() || "";
        uri = uri_root + uri.substring(1);
      }
      parts = window.location.href.split("/");
      courseid = parts[4] + "/" + parts[5] + "/" + parts[6];
      idUdiv = $(event.target).parent().find(".idU")[0];
      idDUdiv = $(event.target).parent().find(".idDU")[0];
      idUdiv = (typeof idUdiv !== "undefined" ? idUdiv.innerHTML : "");
      idDUdiv = (typeof idDUdiv !== "undefined" ? idDUdiv.innerHTML : "");
      options = {
        optionsAnnotator: {
          permissions: {
            user: {
              id: idUdiv,
              name: idDUdiv
            },
            userString: function(user) {
              if (user && user.name) {
                return user.name;
              }
              return user;
            },
            userId: function(user) {
              if (user && user.id) {
                return user.id;
              }
              return user;
            }
          },
          auth: {
            token: token
          },
          store: {
            prefix: storage_url,
            annotationData: {
              uri: uri
            },
            urls: {
              create: '/create',
              read: '/read/:id',
              update: '/update/:id',
              destroy: '/delete/:id',
              search: '/search'
            },
            loadFromSearch: {
              limit: 10000,
              uri: uri,
              user: idUdiv
            }
          }
        },
        optionsVideoJS: {
          techOrder: ["html5", "flash", "youtube"],
          customControlsOnMobile: true
        },
        optionsOVA: {
          posBigNew: 'none',
          NumAnnotations: 20
        },
        optionsRichText: {
          tinymce: {
            selector: "li.annotator-item textarea",
            plugins: "media image insertdatetime link code",
            menubar: false,
            toolbar_items_size: 'small',
            extended_valid_elements: "iframe[src|frameborder|style|scrolling|class|width|height|name|align|id]",
            toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media rubric | code "
          }
        }
      };
      if (found) {
        if (Annotator._instances.length !== 0) {
          $(event.target).annotator("destroy");
        }
        return ova = new OpenVideoAnnotation.Annotator($(event.target), options);
      } else {
        if (event.target.id === "annotator-viewer") {
          return ova = new OpenVideoAnnotation.Annotator($(event.target), options);
        } else {
          return this.targets.push(event.target);
        }
      }
    };

    return StudentNotes;

  })();

  $(document).ready(function($) {
    return new StudentNotes($, this);
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.LmsRuntime = {};

  LmsRuntime.v1 = (function(_super) {
    __extends(v1, _super);

    function v1() {
      _ref = v1.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    v1.prototype.handlerUrl = function(element, handlerName, suffix, query, thirdparty) {
      var courseId, handlerAuth, uri, usageId;
      courseId = $(element).data("course-id");
      usageId = $(element).data("usage-id");
      handlerAuth = thirdparty ? "handler_noauth" : "handler";
      uri = URI('/courses').segment(courseId).segment('xblock').segment(usageId).segment(handlerAuth).segment(handlerName);
      if (suffix != null) {
        uri.segment(suffix);
      }
      if (query != null) {
        uri.search(query);
      }
      return uri.toString();
    };

    return v1;

  })(XBlock.Runtime.v1);

}).call(this);

(function($, undefined) {
  var form_ext;
  $.form_ext  = form_ext = {
    ajax: function(options) {
      return $.ajax(options);
    },
    handleRemote: function(element) {
      var method = element.attr('method');
      var url = element.attr('action');
      var data = element.serializeArray();
      var options = {
        type: method || 'GET',
        data: data,
        dataType: 'text json',
        success: function(data, status, xhr) {
          element.trigger("ajax:success", [data, status, xhr]);
        },
        complete: function(xhr, status) {
          element.trigger("ajax:complete", [xhr, status]);
        },
        error: function(xhr, status, error) {
          element.trigger("ajax:error", [xhr, status, error]);
        }
      }
      if(url) { options.url = url; }
      return form_ext.ajax(options)
    },
    CSRFProtection: function(xhr) {
      var token = $.cookie('csrftoken');
      if (token) xhr.setRequestHeader('X-CSRFToken', token);
    }
  }
  $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { form_ext.CSRFProtection(xhr); }});
  $(document).delegate('form', 'submit', function(e) {
    var form = $(this),
    remote = form.data("remote") !== undefined;

    if(remote) {
      form_ext.handleRemote(form);
      return false;
    }

  });
})(jQuery);

$(document).ready(function () {
  // define variables for code legibility
  var dropdownMenuToggle = $('a.dropdown');
  var dropdownMenu = $('ul.dropdown-menu');
  var menuItems = dropdownMenu.find('a');
  
  // bind menu toggle click for later use
  dropdownMenuToggle.toggle(function() {
    dropdownMenu.addClass("expanded").find('a').first().focus();
    dropdownMenuToggle.addClass("active").attr("aria-expanded", "true");
  }, function() {
    dropdownMenu.removeClass("expanded");
    dropdownMenuToggle.removeClass("active").attr("aria-expanded", "false").focus();
  });
  
  //catch keypresses when focused on dropdownMenuToggle (we only care about spacebar keypresses here)
  dropdownMenuToggle.on('keydown', function(event){
    // if space key pressed
    if ( event.which == 32) {
      dropdownMenuToggle.click();
      event.preventDefault();
    }
  });
  
  //catch keypresses when inside dropdownMenu (we want to catch spacebar; escape; up arrow or shift+tab; and down arrow or tab)
  dropdownMenu.on('keydown', function(event){
    catchKeyPress($(this), event);
  });
  
  function catchKeyPress(object, event) {
    // get currently focused item
    var focusedItem = jQuery(':focus');

    // get the number of focusable items
    var numberOfMenuItems = menuItems.length

    // get the index of the currently focused item
    var focusedItemIndex = menuItems.index(focusedItem);
    
    // var to store next focused item index
    var itemToFocusIndex;
    
    // if space key pressed
    if ( event.which == 32) {
      dropdownMenuToggle.click();
      event.preventDefault();
    }
    
    // if escape key pressed
    if (event.which == 27) {
      dropdownMenuToggle.click();
      event.preventDefault();
    }
    
    // if up arrow key pressed or shift+tab
    if (event.which == 38 || (event.which == 9 && event.shiftKey)) {
      // if first item go to last
      if (focusedItemIndex === 0) {
        menuItems.last().focus();
      } else {
        itemToFocusIndex = focusedItemIndex - 1;
        menuItems.get(itemToFocusIndex).focus();
      }
      event.preventDefault();
    }
    
    // if down arrow key pressed or tab key
    if (event.which == 40 || event.which == 9) {
      // if last item go to first
      if (focusedItemIndex == numberOfMenuItems - 1) {
        menuItems.first().focus();
      } else {
        itemToFocusIndex = focusedItemIndex + 1;
        menuItems.get(itemToFocusIndex).focus();
      }
      event.preventDefault();
    }
  }
});
(function($){
  $.fn.extend({
    /*
     * leanModal prepares an element to be a modal dialog.  Call it once on the
     * element that launches the dialog, when the page is ready.  This function
     * will add a .click() handler that properly opens the dialog.
     *
     * The launching element must:
     *   - be an <a> element, not a button,
     *   - have an href= attribute identifying the id of the dialog element,
     *   - have rel='leanModal'.
     */
    leanModal: function(options) {
      var defaults = {
        top: 100,
        overlay: 0.5,
        closeButton: null,
        position: 'fixed'
      }

      if ($("#lean_overlay").length == 0) {
        var overlay = $("<div id='lean_overlay'></div>");
        $("body").append(overlay);
      }

      options = $.extend(defaults, options);

      return this.each(function() {
        var o = options;

        $(this).click(function(e) {

          $(".modal").hide();

          var modal_id = $(this).attr("href");

          if ($(modal_id).hasClass("video-modal")) {
            //Video modals need to be cloned before being presented as a modal
            //This is because actions on the video get recorded in the history.
            //Deleting the video (clone) prevents the odd back button behavior.
            var modal_clone = $(modal_id).clone(true, true);
            modal_clone.attr('id', 'modal_clone');
            $(modal_id).after(modal_clone);
            modal_id = '#modal_clone';
          }

          $("#lean_overlay").click(function(e) {
            close_modal(modal_id, e);
          });

          $(o.closeButton).click(function(e) {
            close_modal(modal_id, e);
          });

          // To enable closing of email modal when copy button hit
          $(o.copyEmailButton).click(function(e) {
            close_modal(modal_id, e);
          });

          var modal_height = $(modal_id).outerHeight();
          var modal_width = $(modal_id).outerWidth();

          $('#lean_overlay').css({ 'display' : 'block', opacity : 0 });
          $('#lean_overlay').fadeTo(200,o.overlay);

          $('iframe', modal_id).attr('src', $('iframe', modal_id).data('src'));
          if ($(modal_id).hasClass("email-modal")){
            $(modal_id).css({
              'width' : 80 + '%',
              'height' : 80 + '%',
              'position' : o.position,
              'opacity' : 0,
              'z-index' : 11000,
              'left' : 10 + '%',
              'top' : 10 + '%'
            })
          } else {
            $(modal_id).css({
              'position' : o.position,
              'opacity' : 0,
              'z-index': 11000,
              'left' : 50 + '%',
              'margin-left' : -(modal_width/2) + "px",
              'top' : o.top + "px"
            })
        }

          $(modal_id).show().fadeTo(200,1);
          $(modal_id).find(".notice").hide().html("");
          var notice = $(this).data('notice')
          if(notice !== undefined) {
            $notice = $(modal_id).find(".notice");
            $notice.show().html(notice);
            // This is for activating leanModal links that were in the notice. We should have a cleaner way of
            // allowing all dynamically added leanmodal links to work.
            $notice.find("a[rel*=leanModal]").leanModal({ top : 120, overlay: 1, closeButton: ".close-modal", position: 'absolute' });
          }
          window.scrollTo(0, 0);
          e.preventDefault();
        });
      });

      function close_modal(modal_id, e) {
        $("#lean_overlay").fadeOut(200);
        $('iframe', modal_id).attr('src', '');
        $(modal_id).css({ 'display' : 'none' });
        if (modal_id == '#modal_clone') {
          $(modal_id).remove();
        }
        e.preventDefault();
      }
    }
  });

  $(document).ready(function ($) {
    $("a[rel*=leanModal]").each(function () {
      $(this).leanModal({ top : 120, overlay: 1, closeButton: ".close-modal", position: 'absolute' });
      embed = $($(this).attr('href')).find('iframe')
      if (embed.length > 0 && embed.attr('src')) {
        var sep = (embed.attr('src').indexOf("?") > 0) ? '&' : '?';
        embed.data('src', embed.attr('src') + sep + 'autoplay=1&rel=0');
        embed.attr('src', '');
      }
    });
  });
})(jQuery);

$(function() {
  if ($('.filter nav').length > 0) {
    var offset = $('.filter nav').offset().top;

    $(window).scroll(function() {
      if (offset <= window.pageYOffset) {
        return $('.filter nav').addClass('fixed-top');
      }
      else if (offset >= window.pageYOffset) {
        return $('.filter nav').removeClass('fixed-top');
      }
    });
  }
});

// http://james.padolsey.com/javascript/bujs-1-getparameterbyname/
function getParameterByName(name) {
    var match = RegExp('[?&]' + name + '=([^&]*)')
                    .exec(window.location.search);

    return match ?
        decodeURIComponent(match[1].replace(/\+/g, ' '))
        : null;
}

// checks whether or not the url is external to the local site.
// generously provided by StackOverflow: http://stackoverflow.com/questions/6238351/fastest-way-to-detect-external-urls
window.isExternal = function (url) {
    // parse the url into protocol, host, path, query, and fragment. More information can be found here: http://tools.ietf.org/html/rfc3986#appendix-B
    var match = url.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/);
    // match[1] matches a protocol if one exists in the url
    // if the protocol in the url does not match the protocol in the window's location, this url is considered external
    if (typeof match[1] === "string" &&
            match[1].length > 0 &&
            match[1].toLowerCase() !== location.protocol)
        return true;
    // match[2] matches the host if one exists in the url
    // if the host in the url does not match the host of the window location, this url is considered external
    if (typeof match[2] === "string" &&
            match[2].length > 0 &&
            // this regex removes the port number if it patches the current location's protocol
            match[2].replace(new RegExp(":("+{"http:":80,"https:":443}[location.protocol]+")?$"), "") !== location.host)
        return true;
    return false;
};

// Utility method for replacing a portion of a string.
window.rewriteStaticLinks = function(content, from, to) {
    if (from === null || to === null) {
        return content;
    }
    // replace only relative urls
    function replacer(match){
        if (match === from){
            return to;
        }
        else {
            return match;
        }
    }
    // change all relative urls only which may be embedded inside other tags in content.
    // handle http and https
    // note: add other protocols here
    var regex = new RegExp("(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%_\+.~#?&//=]*))?"+from, 'g');
    return content.replace(regex, replacer);
};

// Appends a parameter to a path; useful for indicating initial or return signin, for example
window.appendParameter = function(path, key, value) {
    // Check if the given path already contains a query string by looking for the ampersand separator
    if (path.indexOf("?") > -1) {
        var splitPath = path.split("?");
        var parameters = window.parseQueryString(splitPath[1]);
        // Check if the provided key already exists in the query string
        if (key in parameters) {
            // Overwrite the existing key's value with the provided value
            parameters[key] = value;

            // Reconstruct the path, including the overwritten key/value pair
            var reconstructedPath = splitPath[0] + "?";
            for (var k in parameters) {
                reconstructedPath = reconstructedPath + k + "=" + parameters[k] + "&";
            }
            // Strip the trailing ampersand
            return reconstructedPath.slice(0, -1);
        } else {
            // Check for a trailing ampersand
            if (path[path.length - 1] != "&") {
                // Append signin parameter to the existing query string
                return path + "&" + key + "=" + value;
            } else {
                // Append signin parameter to the existing query string, excluding the ampersand
                return path + key + "=" + value;
            }
        }
    } else {
        // Append new query string containing the provided parameter
        return path + "?" + key + "=" + value;
    }
};

// Convert a query string to a key/value object
window.parseQueryString = function(queryString) {
    var parameters = {}, queries, pair, i, l;

    // Split the query string into key/value pairs
    queries = queryString.split("&");

    // Break the array of strings into an object
    for (i = 0, l = queries.length; i < l; i++) {
        pair = queries[i].split('=');
        parameters[pair[0]] = pair[1];
    }

    return parameters
};

// Check if the user recently enrolled in a course by looking at a referral URL
window.checkRecentEnrollment = function(referrer) {
    var enrolledIn = null;
    
    // Check if the referrer URL contains a query string
    if (referrer.indexOf("?") > -1) {
        referrerQueryString = referrer.split("?")[1];
    } else {
        referrerQueryString = "";
    }

    if (referrerQueryString != "") {
        // Convert a non-empty query string into a key/value object
        var referrerParameters = window.parseQueryString(referrerQueryString);
        if ("course_id" in referrerParameters && "enrollment_action" in referrerParameters) {
            if (referrerParameters.enrollment_action == "enroll") {
                enrolledIn = referrerParameters.course_id;
            }
        }
    }

    return enrolledIn
};

window.assessUserSignIn = function(parameters, userID, email, username) {
    // Check if the user has logged in to enroll in a course - designed for when "Register" button registers users on click (currently, this could indicate a course registration when there may not have yet been one)
    var enrolledIn = window.checkRecentEnrollment(document.referrer);

    // Check if the user has just registered
    if (parameters.signin == "initial") {
        window.trackAccountRegistration(enrolledIn, userID, email, username);
    } else {
        window.trackReturningUserSignIn(enrolledIn, userID, email, username);
    }
};

window.trackAccountRegistration = function(enrolledIn, userID, email, username) {
    // Alias the user's anonymous history with the user's new identity (for Mixpanel)
    analytics.alias(userID);

    // Map the user's activity to their newly assigned ID
    analytics.identify(userID, {
        email: email,
        username: username
    });

    // Track the user's account creation
    analytics.track("edx.bi.user.account.registered", {
        category: "conversion",
        label: enrolledIn != null ? enrolledIn : "none"
    });
};

window.trackReturningUserSignIn = function(enrolledIn, userID, email, username) {
    // Map the user's activity to their assigned ID
    analytics.identify(userID, {
        email: email,
        username: username
    });

    // Track the user's sign in
    analytics.track("edx.bi.user.account.authenticated", {
        category: "conversion",
        label: enrolledIn != null ? enrolledIn : "none"
    });
};

window.identifyUser = function(userID, email, username) {
    // If the signin parameter isn't present but the query string is non-empty, map the user's activity to their assigned ID
    analytics.identify(userID, {
        email: email,
        username: username
    });    
};

/*

============================================
License for Application
============================================

This license is governed by United States copyright law, and with respect to matters
of tort, contract, and other causes of action it is governed by North Carolina law,
without regard to North Carolina choice of law provisions.  The forum for any dispute
resolution shall be in Wake County, North Carolina.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list
   of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this
   list of conditions and the following disclaimer in the documentation and/or other
   materials provided with the distribution.

3. The name of the author may not be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
var focusedElementBeforeModal;

var accessible_modal = function(trigger, closeButtonId, modalId, mainPageId) {

  // Modifies a lean modal to optimize focus management.
  // "trigger" is the selector for the link element that triggers the modal.
  // "closeButtonId" is the selector for the button that closes out the modal.
  // "modalId" is the selector for the modal being managed
  // "mainPageId" is the selector for the main part of the page
  // 
  // based on http://accessibility.oit.ncsu.edu/training/aria/modal-window/modal-window.js
  // 
  // see http://accessibility.oit.ncsu.edu/blog/2013/09/13/the-incredible-accessible-modal-dialog/
  // for more information on managing modals
  // 
  var focusableElementsString = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]";

  $(trigger).click(function(){
    focusedElementBeforeModal = $(trigger);

    // when modal is opened, adjust tabindexes and aria-hidden attributes
    $(mainPageId).attr("aria-hidden", "true");
    $(modalId).attr("aria-hidden", "false");
  
    var focusableItems = $(modalId).find("*").filter(focusableElementsString).filter(':visible');
    
    focusableItems.attr("tabindex", "2");
    $(closeButtonId).attr("tabindex", "1");
    $(closeButtonId).focus()

    // define the last tabbable element to complete tab cycle
    var last;
    if (focusableItems.length !== 0) {
      last = focusableItems.last();
    } else {
      last = $(closeButtonId);
    };

    // tab on last element in modal returns to the first one
    last.on('keydown', function(e) {
      var keyCode = e.keyCode || e.which;
      // 9 is the js keycode for tab
      if (!e.shiftKey && keyCode === 9) {
        e.preventDefault();
        $(closeButtonId).focus();
      }
    });

    // shift+tab on first element in modal returns to the last one
    $(closeButtonId).on('keydown', function(e) {
      var keyCode = e.keyCode || e.which;
      // 9 is the js keycode for tab
      if (e.shiftKey && keyCode == 9) {
        e.preventDefault();
        last.focus();
      }
    });

    // manage aria-hidden attrs, return focus to trigger on close
    $("#lean_overlay, " + closeButtonId).click(function(){
      $(mainPageId).attr("aria-hidden", "false");
      $(modalId).attr("aria-hidden", "true");
      focusedElementBeforeModal.focus();
    });

    // get modal to exit on escape key
    $(".modal").on("keydown", function(e) {
      var keyCode = e.keyCode || e.which;
      // 27 is the javascript keycode for the ESC key
      if (keyCode === 27) {
          e.preventDefault();
          $(closeButtonId).click();
      }
    });

    // In IE, focus shifts to iframes when they load.
    // These lines ensure that focus is shifted back to the close button
    // in the case that a modal that contains an iframe is opened in IE.
    // see http://stackoverflow.com/questions/15792620/how-to-get-focus-back-for-parent-window-from-an-iframe-programmatically-in-javas
    var initialFocus = true
    $(modalId).find("iframe").on("focus", function() {
      if (initialFocus) {
        $(closeButtonId).focus();
        initialFocus = false;
      };
    });
  });
};

// NOTE: This is a gross hack to make the skip links work for Webkit browsers
// see http://stackoverflow.com/questions/6280399/skip-links-not-working-in-chrome/12720183#12720183

// handle things properly for clicks
$('.nav-skip').click(function() {
    var href = $(this).attr('href');
    if(href) {
        $(href).attr('tabIndex', -1).focus();
    }
});
// and for the enter key
$('.nav-skip').keypress(function(e) {
    if(e.which == 13) {
        var href = $(this).attr('href');
        if(href) {
            $(href).attr('tabIndex', -1).focus();
        }
    }
});

// Creates a window level SR object that can be used for giving audible feedback to screen readers.
$(function(){
    var SRAlert;

    SRAlert = (function() {

      function SRAlert() {
        $('body').append('<div id="reader-feedback" class="sr" style="display:none" aria-hidden="false" aria-atomic="true" aria-live="assertive"></div>');
        this.el = $('#reader-feedback');
      }

      SRAlert.prototype.clear = function() {
        return this.el.html(' ');
      };

      SRAlert.prototype.readElts = function(elts) {
        var feedback = '';
        $.each(elts, function(idx, value) {
          return feedback += '<p>' + $(value).html() + '</p>\n';
        });
        return this.el.html(feedback);
      };

      SRAlert.prototype.readText = function(text) {
        return this.el.text(text);
      };

      return SRAlert;

    })();

    window.SR = new SRAlert;
});

/*
 * This file is used for keeping compatibility with Internet Explorer.
 * As starting with IE10, the conditional comments are not supported, this file
 * will always be loaded whether the browser is IE or not. Therefore, the code
 * here should not make any assumption and should always detect the execution
 * conditions itself.
 */

// Shim name: Create the attribute of 'window.location.origin'
// IE version: 11 or earlier, 12 or later not tested
// Internet Explorer does not have built-in property 'window.location.origin',
// we need to create one here as some vendor code such as TinyMCE uses this.
if (!window.location.origin) {
    window.location.origin = window.location.protocol + "//" + window.location.hostname
                           + (window.location.port ? ':' + window.location.port : '');
}

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Content = (function(_super) {
      __extends(Content, _super);

      function Content() {
        _ref = Content.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Content.contents = {};

      Content.contentInfos = {};

      Content.prototype.template = function() {
        return DiscussionUtil.getTemplate('_content');
      };

      Content.prototype.actions = {
        editable: '.admin-edit',
        can_reply: '.discussion-reply',
        can_endorse: '.admin-endorse',
        can_delete: '.admin-delete',
        can_openclose: '.admin-openclose'
      };

      Content.prototype.urlMappers = {};

      Content.prototype.urlFor = function(name) {
        return this.urlMappers[name].apply(this);
      };

      Content.prototype.can = function(action) {
        return (this.get('ability') || {})[action];
      };

      Content.prototype.updateInfo = function(info) {
        if (info) {
          this.set('ability', info.ability);
          this.set('voted', info.voted);
          return this.set('subscribed', info.subscribed);
        }
      };

      Content.prototype.addComment = function(comment, options) {
        var comments_count, model, thread;
        options || (options = {});
        if (!options.silent) {
          thread = this.get('thread');
          comments_count = parseInt(thread.get('comments_count'));
          thread.set('comments_count', comments_count + 1);
        }
        this.get('children').push(comment);
        model = new Comment($.extend({}, comment, {
          thread: this.get('thread')
        }));
        this.get('comments').add(model);
        this.trigger("comment:add");
        return model;
      };

      Content.prototype.removeComment = function(comment) {
        var comments_count, thread;
        thread = this.get('thread');
        comments_count = parseInt(thread.get('comments_count'));
        thread.set('comments_count', comments_count - 1 - comment.getCommentsCount());
        return this.trigger("comment:remove");
      };

      Content.prototype.resetComments = function(children) {
        var comment, _i, _len, _ref1, _results;
        this.set('children', []);
        this.set('comments', new Comments());
        _ref1 = children || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          comment = _ref1[_i];
          _results.push(this.addComment(comment, {
            silent: true
          }));
        }
        return _results;
      };

      Content.prototype.initialize = function() {
        var userId;
        Content.addContent(this.id, this);
        userId = this.get('user_id');
        if (userId != null) {
          this.set('staff_authored', DiscussionUtil.isStaff(userId));
          this.set('community_ta_authored', DiscussionUtil.isTA(userId));
        } else {
          this.set('staff_authored', false);
          this.set('community_ta_authored', false);
        }
        if (Content.getInfo(this.id)) {
          this.updateInfo(Content.getInfo(this.id));
        }
        this.set('user_url', DiscussionUtil.urlFor('user_profile', userId));
        return this.resetComments(this.get('children'));
      };

      Content.prototype.remove = function() {
        if (this.get('type') === 'comment') {
          this.get('thread').removeComment(this);
          return this.get('thread').trigger("comment:remove", this);
        } else {
          return this.trigger("thread:remove", this);
        }
      };

      Content.addContent = function(id, content) {
        return this.contents[id] = content;
      };

      Content.getContent = function(id) {
        return this.contents[id];
      };

      Content.getInfo = function(id) {
        return this.contentInfos[id];
      };

      Content.loadContentInfos = function(infos) {
        var id, info;
        for (id in infos) {
          info = infos[id];
          if (this.getContent(id)) {
            this.getContent(id).updateInfo(info);
          }
        }
        return $.extend(this.contentInfos, infos);
      };

      Content.prototype.pinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.unPinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.flagAbuse = function() {
        var temp_array;
        temp_array = this.get("abuse_flaggers");
        temp_array.push(window.user.get('id'));
        this.set("abuse_flaggers", temp_array);
        return this.trigger("change", this);
      };

      Content.prototype.unflagAbuse = function() {
        this.get("abuse_flaggers").pop(window.user.get('id'));
        return this.trigger("change", this);
      };

      Content.prototype.vote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) + 1;
        return this.trigger("change", this);
      };

      Content.prototype.unvote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) - 1;
        return this.trigger("change", this);
      };

      return Content;

    })(Backbone.Model);
    this.Thread = (function(_super) {
      __extends(Thread, _super);

      function Thread() {
        _ref1 = Thread.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Thread.prototype.urlMappers = {
        'retrieve': function() {
          return DiscussionUtil.urlFor('retrieve_single_thread', this.discussion.id, this.id);
        },
        'reply': function() {
          return DiscussionUtil.urlFor('create_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'close': function() {
          return DiscussionUtil.urlFor('openclose_thread', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_thread', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_thread', this.id);
        },
        'follow': function() {
          return DiscussionUtil.urlFor('follow_thread', this.id);
        },
        'unfollow': function() {
          return DiscussionUtil.urlFor('unfollow_thread', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        },
        'pinThread': function() {
          return DiscussionUtil.urlFor("pin_thread", this.id);
        },
        'unPinThread': function() {
          return DiscussionUtil.urlFor("un_pin_thread", this.id);
        }
      };

      Thread.prototype.initialize = function() {
        this.set('thread', this);
        return Thread.__super__.initialize.call(this);
      };

      Thread.prototype.comment = function() {
        return this.set("comments_count", parseInt(this.get("comments_count")) + 1);
      };

      Thread.prototype.follow = function() {
        return this.set('subscribed', true);
      };

      Thread.prototype.unfollow = function() {
        return this.set('subscribed', false);
      };

      Thread.prototype.display_body = function() {
        if (this.has("highlighted_body")) {
          return String(this.get("highlighted_body")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("body");
        }
      };

      Thread.prototype.display_title = function() {
        if (this.has("highlighted_title")) {
          return String(this.get("highlighted_title")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("title");
        }
      };

      Thread.prototype.toJSON = function() {
        var json_attributes;
        json_attributes = _.clone(this.attributes);
        return _.extend(json_attributes, {
          title: this.display_title(),
          body: this.display_body()
        });
      };

      Thread.prototype.created_at_date = function() {
        return new Date(this.get("created_at"));
      };

      Thread.prototype.created_at_time = function() {
        return new Date(this.get("created_at")).getTime();
      };

      Thread.prototype.hasResponses = function() {
        return this.get('comments_count') > 0;
      };

      return Thread;

    })(this.Content);
    this.Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        _ref2 = Comment.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Comment.prototype.urlMappers = {
        'reply': function() {
          return DiscussionUtil.urlFor('create_sub_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'endorse': function() {
          return DiscussionUtil.urlFor('endorse_comment', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_comment', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_comment', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        }
      };

      Comment.prototype.getCommentsCount = function() {
        var count;
        count = 0;
        this.get('comments').each(function(comment) {
          return count += comment.getCommentsCount() + 1;
        });
        return count;
      };

      return Comment;

    })(this.Content);
    this.Comments = (function(_super) {
      __extends(Comments, _super);

      function Comments() {
        _ref3 = Comments.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Comments.prototype.model = Comment;

      Comments.prototype.initialize = function() {
        var _this = this;
        return this.bind("add", function(item) {
          return item.collection = _this;
        });
      };

      Comments.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      return Comments;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Discussion = (function(_super) {
      __extends(Discussion, _super);

      function Discussion() {
        _ref = Discussion.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Discussion.prototype.model = Thread;

      Discussion.prototype.initialize = function(models, options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        this.pages = options['pages'] || 1;
        this.current_page = 1;
        this.sort_preference = options['sort'];
        this.bind("add", function(item) {
          return item.discussion = _this;
        });
        this.setSortComparator(this.sort_preference);
        return this.on("thread:remove", function(thread) {
          return _this.remove(thread);
        });
      };

      Discussion.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      Discussion.prototype.hasMorePages = function() {
        return this.current_page < this.pages;
      };

      Discussion.prototype.setSortComparator = function(sortBy) {
        switch (sortBy) {
          case 'date':
            return this.comparator = this.sortByDateRecentFirst;
          case 'votes':
            return this.comparator = this.sortByVotes;
          case 'comments':
            return this.comparator = this.sortByComments;
        }
      };

      Discussion.prototype.addThread = function(thread, options) {
        var model;
        if (!this.find(thread.id)) {
          options || (options = {});
          model = new Thread(thread);
          this.add(model);
          return model;
        }
      };

      Discussion.prototype.retrieveAnotherPage = function(mode, options, sort_options, error) {
        var data, url,
          _this = this;
        if (options == null) {
          options = {};
        }
        if (sort_options == null) {
          sort_options = {};
        }
        if (error == null) {
          error = null;
        }
        data = {
          page: this.current_page + 1
        };
        switch (mode) {
          case 'search':
            url = DiscussionUtil.urlFor('search');
            data['text'] = options.search_text;
            break;
          case 'commentables':
            url = DiscussionUtil.urlFor('search');
            data['commentable_ids'] = options.commentable_ids;
            break;
          case 'all':
            url = DiscussionUtil.urlFor('threads');
            break;
          case 'flagged':
            data['flagged'] = true;
            url = DiscussionUtil.urlFor('search');
            break;
          case 'followed':
            url = DiscussionUtil.urlFor('followed_threads', options.user_id);
        }
        if (options['group_id']) {
          data['group_id'] = options['group_id'];
        }
        data['sort_key'] = sort_options.sort_key || 'date';
        data['sort_order'] = sort_options.sort_order || 'desc';
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          url: url,
          data: data,
          dataType: 'json',
          success: function(response, textStatus) {
            var models, new_collection, new_threads;
            models = _this.models;
            new_threads = [
              (function() {
                var _i, _len, _ref1, _results;
                _ref1 = response.discussion_data;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  data = _ref1[_i];
                  _results.push(new Thread(data));
                }
                return _results;
              })()
            ][0];
            new_collection = _.union(models, new_threads);
            Content.loadContentInfos(response.annotated_content_info);
            _this.pages = response.num_pages;
            _this.current_page = response.page;
            return _this.reset(new_collection);
          },
          error: error
        });
      };

      Discussion.prototype.sortByDate = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return new Date(today.getTime() + (24 * 60 * 60 * 1000));
        } else {
          return thread.get("created_at");
        }
      };

      Discussion.prototype.sortByDateRecentFirst = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return -(new Date(today.getTime() + (24 * 60 * 60 * 1000)));
        } else {
          return -(new Date(thread.get("created_at")).getTime());
        }
      };

      Discussion.prototype.sortByVotes = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("votes")['up_count']);
        thread2_count = parseInt(thread2.get("votes")['up_count']);
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      Discussion.prototype.sortByComments = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("comments_count"));
        thread2_count = parseInt(thread2.get("comments_count"));
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      return Discussion;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.DiscussionFilter = (function() {
    function DiscussionFilter() {}

    DiscussionFilter.filterDrop = function(e) {
      var $drop, $items, query;
      $drop = $(e.target).parents('.topic_menu_wrapper, .browse-topic-drop-menu-wrapper');
      query = $(e.target).val();
      $items = $drop.find('a');
      if (query.length === 0) {
        $items.removeClass('hidden');
        return;
      }
      $items.addClass('hidden');
      return $items.each(function(i) {
        var terms, test, thisText;
        thisText = $(this).not('.unread').text();
        $(this).parents('ul').siblings('a').not('.unread').each(function(i) {
          return thisText = thisText + ' ' + $(this).text();
        });
        test = true;
        terms = thisText.split(' ');
        if (thisText.toLowerCase().search(query.toLowerCase()) === -1) {
          test = false;
        }
        if (test) {
          $(this).removeClass('hidden');
          $(this).parent().find('a').removeClass('hidden');
          return $(this).parents('ul').siblings('a').removeClass('hidden');
        }
      });
    };

    return DiscussionFilter;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionModuleView = (function(_super) {
      __extends(DiscussionModuleView, _super);

      function DiscussionModuleView() {
        this.navigateToPage = __bind(this.navigateToPage, this);
        this.renderPagination = __bind(this.renderPagination, this);
        this.addThread = __bind(this.addThread, this);
        this.renderDiscussion = __bind(this.renderDiscussion, this);
        this.loadPage = __bind(this.loadPage, this);
        this.toggleDiscussion = __bind(this.toggleDiscussion, this);
        this.hideDiscussion = __bind(this.hideDiscussion, this);
        this.toggleNewPost = __bind(this.toggleNewPost, this);
        _ref = DiscussionModuleView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionModuleView.prototype.events = {
        "click .discussion-show": "toggleDiscussion",
        "keydown .discussion-show": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleDiscussion);
        },
        "click .new-post-btn": "toggleNewPost",
        "keydown .new-post-btn": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleNewPost);
        },
        "click .new-post-cancel": "hideNewPost",
        "click .discussion-paginator a": "navigateToPage"
      };

      DiscussionModuleView.prototype.paginationTemplate = function() {
        return DiscussionUtil.getTemplate("_pagination");
      };

      DiscussionModuleView.prototype.page_re = /\?discussion_page=(\d+)/;

      DiscussionModuleView.prototype.initialize = function() {
        var match;
        this.toggleDiscussionBtn = this.$(".discussion-show");
        match = this.page_re.exec(window.location.href);
        if (match) {
          return this.page = parseInt(match[1]);
        } else {
          return this.page = 1;
        }
      };

      DiscussionModuleView.prototype.toggleNewPost = function(event) {
        event.preventDefault();
        if (!this.newPostForm) {
          this.toggleDiscussion();
          this.isWaitingOnNewPost = true;
          return;
        }
        if (this.showed) {
          this.newPostForm.slideDown(300);
        } else {
          this.newPostForm.show();
        }
        this.toggleDiscussionBtn.addClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html(gettext("Hide Discussion"));
        this.$("section.discussion").slideDown();
        return this.showed = true;
      };

      DiscussionModuleView.prototype.hideNewPost = function(event) {
        event.preventDefault();
        return this.newPostForm.slideUp(300);
      };

      DiscussionModuleView.prototype.hideDiscussion = function() {
        this.$("section.discussion").slideUp();
        this.toggleDiscussionBtn.removeClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html(gettext("Show Discussion"));
        return this.showed = false;
      };

      DiscussionModuleView.prototype.toggleDiscussion = function(event) {
        var $elem,
          _this = this;
        if (this.showed) {
          return this.hideDiscussion();
        } else {
          this.toggleDiscussionBtn.addClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html(gettext("Hide Discussion"));
          if (this.retrieved) {
            this.$("section.discussion").slideDown();
            return this.showed = true;
          } else {
            $elem = this.toggleDiscussionBtn;
            return this.loadPage($elem, function() {
              _this.hideDiscussion();
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the discussion. Please try again."));
            });
          }
        }
      };

      DiscussionModuleView.prototype.loadPage = function($elem, error) {
        var discussionId, url,
          _this = this;
        discussionId = this.$el.data("discussion-id");
        url = DiscussionUtil.urlFor('retrieve_discussion', discussionId) + ("?page=" + this.page);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          $loading: $elem,
          takeFocus: true,
          url: url,
          type: "GET",
          dataType: 'json',
          success: function(response, textStatus, jqXHR) {
            return _this.renderDiscussion($elem, response, textStatus, discussionId);
          },
          error: error
        });
      };

      DiscussionModuleView.prototype.renderDiscussion = function($elem, response, textStatus, discussionId) {
        var $discussion, user;
        $elem.focus();
        user = new DiscussionUser(response.user_info);
        window.user = user;
        DiscussionUtil.setUser(user);
        Content.loadContentInfos(response.annotated_content_info);
        DiscussionUtil.loadRoles(response.roles);
        this.course_settings = new DiscussionCourseSettings(response.course_settings);
        this.discussion = new Discussion();
        this.discussion.reset(response.discussion_data, {
          silent: false
        });
        $discussion = $(Mustache.render($("script#_inline_discussion").html(), {
          'threads': response.discussion_data,
          'discussionId': discussionId
        }));
        if (this.$('section.discussion').length) {
          this.$('section.discussion').replaceWith($discussion);
        } else {
          this.$el.append($discussion);
        }
        this.newPostForm = $('.new-post-article');
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadInlineView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
        DiscussionUtil.bulkUpdateContentInfo(window.$$annotated_content_info);
        this.newPostView = new NewPostView({
          el: this.newPostForm,
          collection: this.discussion,
          course_settings: this.course_settings,
          topicId: discussionId
        });
        this.newPostView.render();
        this.discussion.on("add", this.addThread);
        this.retrieved = true;
        this.showed = true;
        this.renderPagination(response.num_pages);
        if (this.isWaitingOnNewPost) {
          return this.newPostForm.show();
        }
      };

      DiscussionModuleView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      DiscussionModuleView.prototype.renderPagination = function(numPages) {
        var pageUrl, params, thing;
        pageUrl = function(number) {
          return "?discussion_page=" + number;
        };
        params = DiscussionUtil.getPaginationParams(this.page, numPages, pageUrl);
        thing = Mustache.render(this.paginationTemplate(), params);
        return this.$('section.pagination').html(thing);
      };

      DiscussionModuleView.prototype.navigateToPage = function(event) {
        var currPage,
          _this = this;
        event.preventDefault();
        window.history.pushState({}, window.document.title, event.target.href);
        currPage = this.page;
        this.page = $(event.target).data('page-number');
        return this.loadPage($(event.target), function() {
          _this.page = currPage;
          return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the threads you requested. Please try again."));
        });
      };

      return DiscussionModuleView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionRouter = (function(_super) {
      __extends(DiscussionRouter, _super);

      function DiscussionRouter() {
        this.hideNewPost = __bind(this.hideNewPost, this);
        this.showNewPost = __bind(this.showNewPost, this);
        this.navigateToAllThreads = __bind(this.navigateToAllThreads, this);
        this.navigateToThread = __bind(this.navigateToThread, this);
        this.setActiveThread = __bind(this.setActiveThread, this);
        _ref = DiscussionRouter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionRouter.prototype.routes = {
        "": "allThreads",
        ":forum_name/threads/:thread_id": "showThread"
      };

      DiscussionRouter.prototype.initialize = function(options) {
        var _this = this;
        this.discussion = options['discussion'];
        this.course_settings = options['course_settings'];
        this.nav = new DiscussionThreadListView({
          collection: this.discussion,
          el: $(".forum-nav")
        });
        this.nav.on("thread:selected", this.navigateToThread);
        this.nav.on("thread:removed", this.navigateToAllThreads);
        this.nav.on("threads:rendered", this.setActiveThread);
        this.nav.on("thread:created", this.navigateToThread);
        this.nav.render();
        this.newPost = $('.new-post-article');
        this.newPostView = new NewPostView({
          el: this.newPost,
          collection: this.discussion,
          course_settings: this.course_settings,
          mode: "tab"
        });
        this.newPostView.render();
        $('.new-post-btn').bind("click", this.showNewPost);
        $('.new-post-btn').bind("keydown", function(event) {
          return DiscussionUtil.activateOnSpace(event, _this.showNewPost);
        });
        return $('.new-post-cancel').bind("click", this.hideNewPost);
      };

      DiscussionRouter.prototype.allThreads = function() {
        this.nav.updateSidebar();
        return this.nav.goHome();
      };

      DiscussionRouter.prototype.setActiveThread = function() {
        if (this.thread) {
          return this.nav.setActiveThread(this.thread.get("id"));
        } else {
          return this.nav.goHome;
        }
      };

      DiscussionRouter.prototype.showThread = function(forum_name, thread_id) {
        var _this = this;
        this.thread = this.discussion.get(thread_id);
        this.thread.set("unread_comments_count", 0);
        this.thread.set("read", true);
        this.setActiveThread();
        if (this.main) {
          this.main.cleanup();
          this.main.undelegateEvents();
        }
        this.main = new DiscussionThreadView({
          el: $(".discussion-column"),
          model: this.thread
        });
        this.main.render();
        return this.main.on("thread:responses:rendered", function() {
          return _this.nav.updateSidebar();
        });
      };

      DiscussionRouter.prototype.navigateToThread = function(thread_id) {
        var thread;
        thread = this.discussion.get(thread_id);
        return this.navigate("" + (thread.get("commentable_id")) + "/threads/" + thread_id, {
          trigger: true
        });
      };

      DiscussionRouter.prototype.navigateToAllThreads = function() {
        return this.navigate("", {
          trigger: true
        });
      };

      DiscussionRouter.prototype.showNewPost = function(event) {
        this.newPost.slideDown(300);
        return $('.new-post-title').focus();
      };

      DiscussionRouter.prototype.hideNewPost = function(event) {
        return this.newPost.slideUp(300);
      };

      return DiscussionRouter;

    })(Backbone.Router);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var DiscussionApp, DiscussionProfileApp;

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    DiscussionApp = {
      start: function(elem) {
        var content_info, course_settings, discussion, element, sort_preference, thread_pages, threads, user, user_info;
        DiscussionUtil.loadRolesFromContainer();
        element = $(elem);
        window.$$course_id = element.data("course-id");
        user_info = element.data("user-info");
        sort_preference = element.data("sort-preference");
        threads = element.data("threads");
        thread_pages = element.data("thread-pages");
        content_info = element.data("content-info");
        user = new DiscussionUser(user_info);
        DiscussionUtil.setUser(user);
        window.user = user;
        Content.loadContentInfos(content_info);
        discussion = new Discussion(threads, {
          pages: thread_pages,
          sort: sort_preference
        });
        course_settings = new DiscussionCourseSettings(element.data("course-settings"));
        new DiscussionRouter({
          discussion: discussion,
          course_settings: course_settings
        });
        return Backbone.history.start({
          pushState: true,
          root: "/courses/" + $$course_id + "/discussion/forum/"
        });
      }
    };
    DiscussionProfileApp = {
      start: function(elem) {
        var element, numPages, page, threads, user_info;
        DiscussionUtil.loadRoles({
          "Moderator": [],
          "Administrator": [],
          "Community TA": []
        });
        element = $(elem);
        window.$$course_id = element.data("course-id");
        threads = element.data("threads");
        user_info = element.data("user-info");
        window.user = new DiscussionUser(user_info);
        page = element.data("page");
        numPages = element.data("num-pages");
        return new DiscussionUserProfileView({
          el: element,
          collection: threads,
          page: page,
          numPages: numPages
        });
      }
    };
    $(function() {
      $("section.discussion").each(function(index, elem) {
        return DiscussionApp.start(elem);
      });
      return $("section.discussion-user-threads").each(function(index, elem) {
        return DiscussionProfileApp.start(elem);
      });
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionCourseSettings = (function(_super) {
      __extends(DiscussionCourseSettings, _super);

      function DiscussionCourseSettings() {
        _ref = DiscussionCourseSettings.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return DiscussionCourseSettings;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUser = (function(_super) {
      __extends(DiscussionUser, _super);

      function DiscussionUser() {
        _ref = DiscussionUser.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUser.prototype.following = function(thread) {
        return _.include(this.get('subscribed_thread_ids'), thread.id);
      };

      DiscussionUser.prototype.voted = function(thread) {
        return _.include(this.get('upvoted_ids'), thread.id);
      };

      DiscussionUser.prototype.vote = function(thread) {
        this.get('upvoted_ids').push(thread.id);
        return thread.vote();
      };

      DiscussionUser.prototype.unvote = function(thread) {
        this.set('upvoted_ids', _.without(this.get('upvoted_ids'), thread.id));
        return thread.unvote();
      };

      return DiscussionUser;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    if (!window.$$contents) {
      window.$$contents = {};
    }
    return $.fn.extend({
      loading: function(takeFocus) {
        this.$_loading = $("<div class='loading-animation' tabindex='0'><span class='sr'>" + gettext("Loading content") + "</span></div>");
        $(this).after(this.$_loading);
        if (takeFocus) {
          DiscussionUtil.makeFocusTrap(this.$_loading);
          return this.$_loading.focus();
        }
      },
      loaded: function() {
        return this.$_loading.remove();
      }
    });
  });

  this.DiscussionUtil = (function() {
    function DiscussionUtil() {}

    DiscussionUtil.wmdEditors = {};

    DiscussionUtil.getTemplate = function(id) {
      return $("script#" + id).html();
    };

    DiscussionUtil.setUser = function(user) {
      return this.user = user;
    };

    DiscussionUtil.loadRoles = function(roles) {
      return this.roleIds = roles;
    };

    DiscussionUtil.loadFlagModerator = function(what) {
      return this.isFlagModerator = (what === "True") || (what === 1);
    };

    DiscussionUtil.loadRolesFromContainer = function() {
      this.loadRoles($("#discussion-container").data("roles"));
      return this.loadFlagModerator($("#discussion-container").data("flag-moderator"));
    };

    DiscussionUtil.isStaff = function(user_id) {
      var staff, _ref;
      if (user_id == null) {
        user_id = (_ref = this.user) != null ? _ref.id : void 0;
      }
      staff = _.union(this.roleIds['Moderator'], this.roleIds['Administrator']);
      return _.include(staff, parseInt(user_id));
    };

    DiscussionUtil.isTA = function(user_id) {
      var ta, _ref;
      if (user_id == null) {
        user_id = (_ref = this.user) != null ? _ref.id : void 0;
      }
      ta = _.union(this.roleIds['Community TA']);
      return _.include(ta, parseInt(user_id));
    };

    DiscussionUtil.bulkUpdateContentInfo = function(infos) {
      var id, info, _results;
      _results = [];
      for (id in infos) {
        info = infos[id];
        _results.push(Content.getContent(id).updateInfo(info));
      }
      return _results;
    };

    DiscussionUtil.generateDiscussionLink = function(cls, txt, handler) {
      return $("<a>").addClass("discussion-link").attr("href", "javascript:void(0)").addClass(cls).html(txt).click(function() {
        return handler(this);
      });
    };

    DiscussionUtil.urlFor = function(name, param, param1, param2) {
      return {
        follow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/follow",
        unfollow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/unfollow",
        create_thread: "/courses/" + $$course_id + "/discussion/" + param + "/threads/create",
        update_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/update",
        create_comment: "/courses/" + $$course_id + "/discussion/threads/" + param + "/reply",
        delete_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/delete",
        flagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/flagAbuse",
        unFlagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unFlagAbuse",
        flagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/flagAbuse",
        unFlagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unFlagAbuse",
        upvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/upvote",
        downvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/downvote",
        pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/pin",
        un_pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unpin",
        undo_vote_for_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unvote",
        follow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/follow",
        unfollow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unfollow",
        update_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/update",
        endorse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/endorse",
        create_sub_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/reply",
        delete_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/delete",
        upvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/upvote",
        downvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/downvote",
        undo_vote_for_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unvote",
        upload: "/courses/" + $$course_id + "/discussion/upload",
        users: "/courses/" + $$course_id + "/discussion/users",
        search: "/courses/" + $$course_id + "/discussion/forum/search",
        retrieve_discussion: "/courses/" + $$course_id + "/discussion/forum/" + param + "/inline",
        retrieve_single_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        openclose_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/close",
        permanent_link_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        permanent_link_comment: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1 + "#" + param2,
        user_profile: "/courses/" + $$course_id + "/discussion/forum/users/" + param,
        followed_threads: "/courses/" + $$course_id + "/discussion/forum/users/" + param + "/followed",
        threads: "/courses/" + $$course_id + "/discussion/forum",
        "enable_notifications": "/notification_prefs/enable/",
        "disable_notifications": "/notification_prefs/disable/",
        "notifications_status": "/notification_prefs/status/"
      }[name];
    };

    DiscussionUtil.ignoreEnterKey = function(event) {
      if (event.which === 13) {
        return event.preventDefault();
      }
    };

    DiscussionUtil.activateOnSpace = function(event, func) {
      if (event.which === 32) {
        event.preventDefault();
        return func(event);
      }
    };

    DiscussionUtil.makeFocusTrap = function(elem) {
      return elem.keydown(function(event) {
        if (event.which === 9) {
          return event.preventDefault();
        }
      });
    };

    DiscussionUtil.discussionAlert = function(header, body) {
      var alertDiv, alertTrigger;
      if ($("#discussion-alert").length === 0) {
        alertDiv = $("<div class='modal' role='alertdialog' id='discussion-alert' aria-describedby='discussion-alert-message'/>").css("display", "none");
        alertDiv.html("<div class='inner-wrapper discussion-alert-wrapper'>" + "  <button class='close-modal dismiss' aria-hidden='true'><i class='icon-remove'></i></button>" + "  <header><h2/><hr/></header>" + "  <p id='discussion-alert-message'/>" + "  <hr/>" + "  <button class='dismiss'>" + gettext("OK") + "</button>" + "</div>");
        this.makeFocusTrap(alertDiv.find("button"));
        alertTrigger = $("<a href='#discussion-alert' id='discussion-alert-trigger'/>").css("display", "none");
        alertTrigger.leanModal({
          closeButton: "#discussion-alert .dismiss",
          overlay: 1,
          top: 200
        });
        $("body").append(alertDiv).append(alertTrigger);
      }
      $("#discussion-alert header h2").html(header);
      $("#discussion-alert p").html(body);
      $("#discussion-alert-trigger").click();
      return $("#discussion-alert button").focus();
    };

    DiscussionUtil.safeAjax = function(params) {
      var $elem, request,
        _this = this;
      $elem = params.$elem;
      if ($elem && $elem.attr("disabled")) {
        return;
      }
      params["url"] = URI(params["url"]).addSearch({
        ajax: 1
      });
      params["beforeSend"] = function() {
        if ($elem) {
          $elem.attr("disabled", "disabled");
        }
        if (params["$loading"]) {
          if (params["loadingCallback"] != null) {
            return params["loadingCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loading(params["takeFocus"]);
          }
        }
      };
      if (!params["error"]) {
        params["error"] = function() {
          return _this.discussionAlert(gettext("Sorry"), gettext("We had some trouble processing your request. Please ensure you have copied any unsaved work and then reload the page."));
        };
      }
      request = $.ajax(params).always(function() {
        if ($elem) {
          $elem.removeAttr("disabled");
        }
        if (params["$loading"]) {
          if (params["loadedCallback"] != null) {
            return params["loadedCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loaded();
          }
        }
      });
      return request;
    };

    DiscussionUtil.bindLocalEvents = function($local, eventsHandler) {
      var event, eventSelector, handler, selector, _ref, _results;
      _results = [];
      for (eventSelector in eventsHandler) {
        handler = eventsHandler[eventSelector];
        _ref = eventSelector.split(' '), event = _ref[0], selector = _ref[1];
        _results.push($local(selector).unbind(event)[event](handler));
      }
      return _results;
    };

    DiscussionUtil.formErrorHandler = function(errorsField) {
      return function(xhr, textStatus, error) {
        var makeErrorElem, response, _i, _len, _ref, _results;
        makeErrorElem = function(message) {
          return $("<li>").addClass("new-post-form-error").html(message);
        };
        errorsField.empty().show();
        if (xhr.status === 400) {
          response = JSON.parse(xhr.responseText);
          if ((response.errors != null) && response.errors.length > 0) {
            _ref = response.errors;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              error = _ref[_i];
              _results.push(errorsField.append(makeErrorElem(error)));
            }
            return _results;
          }
        } else {
          return errorsField.append(makeErrorElem(gettext("We had some trouble processing your request. Please try again.")));
        }
      };
    };

    DiscussionUtil.clearFormErrors = function(errorsField) {
      return errorsField.empty();
    };

    DiscussionUtil.postMathJaxProcessor = function(text) {
      var RE_DISPLAYMATH, RE_INLINEMATH;
      RE_INLINEMATH = /^\$([^\$]*)\$/g;
      RE_DISPLAYMATH = /^\$\$([^\$]*)\$\$/g;
      return this.processEachMathAndCode(text, function(s, type) {
        if (type === 'display') {
          return s.replace(RE_DISPLAYMATH, function($0, $1) {
            return "\\[" + $1 + "\\]";
          });
        } else if (type === 'inline') {
          return s.replace(RE_INLINEMATH, function($0, $1) {
            return "\\(" + $1 + "\\)";
          });
        } else {
          return s;
        }
      });
    };

    DiscussionUtil.makeWmdEditor = function($content, $local, cls_identifier) {
      var appended_id, editor, elem, id, imageUploadUrl, placeholder, _processor;
      elem = $local("." + cls_identifier);
      placeholder = elem.data('placeholder');
      id = elem.attr("data-id");
      appended_id = "-" + cls_identifier + "-" + id;
      imageUploadUrl = this.urlFor('upload');
      _processor = function(_this) {
        return function(text) {
          return _this.postMathJaxProcessor(text);
        };
      };
      editor = Markdown.makeWmdEditor(elem, appended_id, imageUploadUrl, _processor(this));
      this.wmdEditors["" + cls_identifier + "-" + id] = editor;
      if (placeholder != null) {
        elem.find("#wmd-input" + appended_id).attr('placeholder', placeholder);
      }
      return editor;
    };

    DiscussionUtil.getWmdEditor = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return this.wmdEditors["" + cls_identifier + "-" + id];
    };

    DiscussionUtil.getWmdInput = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return $local("#wmd-input-" + cls_identifier + "-" + id);
    };

    DiscussionUtil.getWmdContent = function($content, $local, cls_identifier) {
      return this.getWmdInput($content, $local, cls_identifier).val();
    };

    DiscussionUtil.setWmdContent = function($content, $local, cls_identifier, text) {
      this.getWmdInput($content, $local, cls_identifier).val(text);
      return this.getWmdEditor($content, $local, cls_identifier).refreshPreview();
    };

    DiscussionUtil.processEachMathAndCode = function(text, processor) {
      var $div, ESCAPED_BACKSLASH, ESCAPED_DOLLAR, RE_DISPLAYMATH, RE_INLINEMATH, cnt, codeArchive, processedText;
      codeArchive = [];
      RE_DISPLAYMATH = /^([^\$]*?)\$\$([^\$]*?)\$\$(.*)$/m;
      RE_INLINEMATH = /^([^\$]*?)\$([^\$]+?)\$(.*)$/m;
      ESCAPED_DOLLAR = '@@ESCAPED_D@@';
      ESCAPED_BACKSLASH = '@@ESCAPED_B@@';
      processedText = "";
      $div = $("<div>").html(text);
      $div.find("code").each(function(index, code) {
        codeArchive.push($(code).html());
        return $(code).html(codeArchive.length - 1);
      });
      text = $div.html();
      text = text.replace(/\\\$/g, ESCAPED_DOLLAR);
      while (true) {
        if (RE_INLINEMATH.test(text)) {
          text = text.replace(RE_INLINEMATH, function($0, $1, $2, $3) {
            processedText += $1 + processor("$" + $2 + "$", 'inline');
            return $3;
          });
        } else if (RE_DISPLAYMATH.test(text)) {
          text = text.replace(RE_DISPLAYMATH, function($0, $1, $2, $3) {
            processedText = processor("$$" + $2 + "$$", 'display') + processedText;
            processedText = $1 + processedText;
            return $3;
          });
        } else {
          processedText += text;
          break;
        }
      }
      text = processedText;
      text = text.replace(new RegExp(ESCAPED_DOLLAR, 'g'), '\\$');
      text = text.replace(/\\\\\\\\/g, ESCAPED_BACKSLASH);
      text = text.replace(/\\begin\{([a-z]*\*?)\}([\s\S]*?)\\end\{\1\}/img, function($0, $1, $2) {
        return processor(("\\begin{" + $1 + "}") + $2 + ("\\end{" + $1 + "}"));
      });
      text = text.replace(new RegExp(ESCAPED_BACKSLASH, 'g'), '\\\\\\\\');
      $div = $("<div>").html(text);
      cnt = 0;
      $div.find("code").each(function(index, code) {
        $(code).html(processor(codeArchive[cnt], 'code'));
        return cnt += 1;
      });
      text = $div.html();
      return text;
    };

    DiscussionUtil.unescapeHighlightTag = function(text) {
      return text.replace(/\&lt\;highlight\&gt\;/g, "<span class='search-highlight'>").replace(/\&lt\;\/highlight\&gt\;/g, "</span>");
    };

    DiscussionUtil.stripHighlight = function(text) {
      return text.replace(/\&(amp\;)?lt\;highlight\&(amp\;)?gt\;/g, "").replace(/\&(amp\;)?lt\;\/highlight\&(amp\;)?gt\;/g, "");
    };

    DiscussionUtil.stripLatexHighlight = function(text) {
      return this.processEachMathAndCode(text, this.stripHighlight);
    };

    DiscussionUtil.markdownWithHighlight = function(text) {
      var converter;
      text = text.replace(/^\&gt\;/gm, ">");
      converter = Markdown.getMathCompatibleConverter();
      text = this.unescapeHighlightTag(this.stripLatexHighlight(converter.makeHtml(text)));
      return text.replace(/^>/gm, "&gt;");
    };

    DiscussionUtil.abbreviateString = function(text, minLength) {
      if (text.length < minLength) {
        return text;
      } else {
        while (minLength < text.length && text[minLength] !== ' ') {
          minLength++;
        }
        return text.substr(0, minLength) + gettext('…');
      }
    };

    DiscussionUtil.abbreviateHTML = function(html, minLength) {
      var $result, imagesToReplace, truncated_text;
      truncated_text = jQuery.truncate(html, {
        length: minLength,
        noBreaks: true,
        ellipsis: gettext('…')
      });
      $result = $("<div>" + truncated_text + "</div>");
      imagesToReplace = $result.find("img:not(:first)");
      if (imagesToReplace.length > 0) {
        $result.append("<p><em>Some images in this post have been omitted</em></p>");
      }
      imagesToReplace.replaceWith("<em>image omitted</em>");
      return $result.html();
    };

    DiscussionUtil.getPaginationParams = function(curPage, numPages, pageUrlFunc) {
      var delta, maxPage, minPage, pageInfo, params;
      delta = 2;
      minPage = Math.max(curPage - delta, 1);
      maxPage = Math.min(curPage + delta, numPages);
      pageInfo = function(pageNum) {
        return {
          number: pageNum,
          url: pageUrlFunc(pageNum)
        };
      };
      return params = {
        page: curPage,
        lowPages: _.range(minPage, curPage).map(pageInfo),
        highPages: _.range(curPage + 1, maxPage + 1).map(pageInfo),
        previous: curPage > 1 ? pageInfo(curPage - 1) : null,
        next: curPage < numPages ? pageInfo(curPage + 1) : null,
        leftdots: minPage > 2,
        rightdots: maxPage < numPages - 1,
        first: minPage > 1 ? pageInfo(1) : null,
        last: maxPage < numPages ? pageInfo(numPages) : null
      };
    };

    return DiscussionUtil;

  }).call(this);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionContentView = (function(_super) {
      __extends(DiscussionContentView, _super);

      function DiscussionContentView() {
        this.unvote = __bind(this.unvote, this);
        this.vote = __bind(this.vote, this);
        this.toggleVote = __bind(this.toggleVote, this);
        this.renderVote = __bind(this.renderVote, this);
        this.unFlagAbuse = __bind(this.unFlagAbuse, this);
        this.flagAbuse = __bind(this.flagAbuse, this);
        this.toggleFlagAbuse = __bind(this.toggleFlagAbuse, this);
        this.toggleFollowing = __bind(this.toggleFollowing, this);
        this.setWmdContent = __bind(this.setWmdContent, this);
        this.getWmdContent = __bind(this.getWmdContent, this);
        this.getWmdEditor = __bind(this.getWmdEditor, this);
        this.makeWmdEditor = __bind(this.makeWmdEditor, this);
        _ref = DiscussionContentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionContentView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "keydown .discussion-flag-abuse": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFlagAbuse);
        }
      };

      DiscussionContentView.prototype.attrRenderer = {
        endorsed: function(endorsed) {
          var _ref1;
          if (endorsed) {
            return this.$(".action-endorse").show().addClass("is-endorsed");
          } else {
            if ((_ref1 = this.model.get('ability')) != null ? _ref1.can_endorse : void 0) {
              this.$(".action-endorse").show();
            } else {
              this.$(".action-endorse").hide();
            }
            return this.$(".action-endorse").removeClass("is-endorsed");
          }
        },
        closed: function(closed) {
          if (!this.$(".action-openclose").length) {
            return;
          }
          if (!this.$(".post-status-closed").length) {
            return;
          }
          if (closed) {
            this.$(".post-status-closed").show();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace(gettext("Close"), gettext("Open")));
            return this.$(".discussion-reply-new").hide();
          } else {
            this.$(".post-status-closed").hide();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace(gettext("Open"), gettext("Close")));
            return this.$(".discussion-reply-new").show();
          }
        },
        voted: function(voted) {},
        votes_point: function(votes_point) {},
        comments_count: function(comments_count) {},
        subscribed: function(subscribed) {
          if (subscribed) {
            return this.$(".dogear").addClass("is-followed").attr("aria-checked", "true");
          } else {
            return this.$(".dogear").removeClass("is-followed").attr("aria-checked", "false");
          }
        },
        ability: function(ability) {
          var action, selector, _ref1, _results;
          _ref1 = this.abilityRenderer;
          _results = [];
          for (action in _ref1) {
            selector = _ref1[action];
            if (!ability[action]) {
              _results.push(selector.disable.apply(this));
            } else {
              _results.push(selector.enable.apply(this));
            }
          }
          return _results;
        }
      };

      DiscussionContentView.prototype.abilityRenderer = {
        editable: {
          enable: function() {
            return this.$(".action-edit").closest("li").show();
          },
          disable: function() {
            return this.$(".action-edit").closest("li").hide();
          }
        },
        can_delete: {
          enable: function() {
            return this.$(".action-delete").closest("li").show();
          },
          disable: function() {
            return this.$(".action-delete").closest("li").hide();
          }
        },
        can_endorse: {
          enable: function() {
            return this.$(".action-endorse").show().css("cursor", "auto");
          },
          disable: function() {
            this.$(".action-endorse").css("cursor", "default");
            if (!this.model.get('endorsed')) {
              return this.$(".action-endorse").hide();
            } else {
              return this.$(".action-endorse").show();
            }
          }
        },
        can_openclose: {
          enable: function() {
            return this.$(".action-openclose").closest("li").show();
          },
          disable: function() {
            return this.$(".action-openclose").closest("li").hide();
          }
        }
      };

      DiscussionContentView.prototype.renderPartialAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.changedAttributes();
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.renderAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.attributes;
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.$ = function(selector) {
        return this.$local.find(selector);
      };

      DiscussionContentView.prototype.initLocal = function() {
        this.$local = this.$el.children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionContentView.prototype.makeWmdEditor = function(cls_identifier) {
        if (!this.$el.find(".wmd-panel").length) {
          return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
        }
      };

      DiscussionContentView.prototype.getWmdEditor = function(cls_identifier) {
        return DiscussionUtil.getWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.getWmdContent = function(cls_identifier) {
        return DiscussionUtil.getWmdContent(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.setWmdContent = function(cls_identifier, text) {
        return DiscussionUtil.setWmdContent(this.$el, $.proxy(this.$, this), cls_identifier, text);
      };

      DiscussionContentView.prototype.initialize = function() {
        this.initLocal();
        return this.model.bind('change', this.renderPartialAttrs, this);
      };

      DiscussionContentView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        event.preventDefault();
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionContentView.prototype.toggleFlagAbuse = function(event) {
        var _ref1;
        event.preventDefault();
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          return this.unFlagAbuse();
        } else {
          return this.flagAbuse();
        }
      };

      DiscussionContentView.prototype.flagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("flagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              /*
              note, we have to clone the array in order to trigger a change event
              */

              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.push(window.user.id);
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      DiscussionContentView.prototype.unFlagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unFlagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.pop(window.user.id);
              if (DiscussionUtil.isFlagModerator) {
                temp_array = [];
              }
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      DiscussionContentView.prototype.renderVote = function() {
        var button, buttonText, buttonTextFmt, voteNum, voted;
        button = this.$el.find(".vote-btn");
        voted = window.user.voted(this.model);
        voteNum = this.model.get("votes")["up_count"];
        button.toggleClass("is-cast", voted);
        button.attr("aria-pressed", voted);
        button.attr("data-tooltip", voted ? gettext("remove vote") : gettext("vote"));
        buttonTextFmt = voted ? ngettext("vote (click to remove your vote)", "votes (click to remove your vote)", voteNum) : ngettext("vote (click to vote)", "votes (click to vote)", voteNum);
        buttonTextFmt = "%(voteNum)s%(startSrSpan)s " + buttonTextFmt + "%(endSrSpan)s";
        buttonText = interpolate(buttonTextFmt, {
          voteNum: voteNum,
          startSrSpan: "<span class='sr'>",
          endSrSpan: "</span>"
        }, true);
        return button.html("<span class='plus-icon'/>" + buttonText);
      };

      DiscussionContentView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionContentView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$el.find(".vote-btn"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      DiscussionContentView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$el.find(".vote-btn"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      return DiscussionContentView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadEditView = (function(_super) {
      __extends(DiscussionThreadEditView, _super);

      function DiscussionThreadEditView() {
        _ref = DiscussionThreadEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      DiscussionThreadEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadEditView.prototype.initialize = function() {
        return DiscussionThreadEditView.__super__.initialize.call(this);
      };

      DiscussionThreadEditView.prototype.render = function() {
        this.template = _.template($("#thread-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      DiscussionThreadEditView.prototype.update = function(event) {
        return this.trigger("thread:update", event);
      };

      DiscussionThreadEditView.prototype.cancel_edit = function(event) {
        return this.trigger("thread:cancel_edit", event);
      };

      return DiscussionThreadEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadListView = (function(_super) {
      var _this = this;

      __extends(DiscussionThreadListView, _super);

      function DiscussionThreadListView() {
        this.updateEmailNotifications = __bind(this.updateEmailNotifications, this);
        this.retrieveFollowed = __bind(this.retrieveFollowed, this);
        this.filterTopics = __bind(this.filterTopics, this);
        this.toggleBrowseMenu = __bind(this.toggleBrowseMenu, this);
        this.hideBrowseMenu = __bind(this.hideBrowseMenu, this);
        this.showBrowseMenu = __bind(this.showBrowseMenu, this);
        this.isBrowseMenuVisible = __bind(this.isBrowseMenuVisible, this);
        this.threadRemoved = __bind(this.threadRemoved, this);
        this.threadSelected = __bind(this.threadSelected, this);
        this.renderThread = __bind(this.renderThread, this);
        this.loadMorePages = __bind(this.loadMorePages, this);
        this.showMetadataAccordingToSort = __bind(this.showMetadataAccordingToSort, this);
        this.renderThreads = __bind(this.renderThreads, this);
        this.updateSidebar = __bind(this.updateSidebar, this);
        this.addAndSelectThread = __bind(this.addAndSelectThread, this);
        this.reloadDisplayedCollection = __bind(this.reloadDisplayedCollection, this);
        this.clearSearchAlerts = __bind(this.clearSearchAlerts, this);
        this.removeSearchAlert = __bind(this.removeSearchAlert, this);
        this.addSearchAlert = __bind(this.addSearchAlert, this);
        _ref = DiscussionThreadListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadListView.prototype.events = {
        "click .forum-nav-browse": "toggleBrowseMenu",
        "keypress .forum-nav-browse-filter-input": function(event) {
          return DiscussionUtil.ignoreEnterKey(event);
        },
        "keyup .forum-nav-browse-filter-input": "filterTopics",
        "click .forum-nav-browse-menu-wrapper": "ignoreClick",
        "click .forum-nav-browse-title": "selectTopic",
        "keydown .forum-nav-search-input": "performSearch",
        "change .forum-nav-sort-control": "sortThreads",
        "click .forum-nav-thread-link": "threadSelected",
        "click .forum-nav-load-more-link": "loadMorePages",
        "change .forum-nav-filter-cohort-control": "chooseCohort"
      };

      DiscussionThreadListView.prototype.initialize = function() {
        var _this = this;
        this.displayedCollection = new Discussion(this.collection.models, {
          pages: this.collection.pages
        });
        this.collection.on("change", this.reloadDisplayedCollection);
        this.discussionIds = "";
        this.collection.on("reset", function(discussion) {
          var board;
          board = $(".current-board").html();
          _this.displayedCollection.current_page = discussion.current_page;
          _this.displayedCollection.pages = discussion.pages;
          return _this.displayedCollection.reset(discussion.models);
        });
        this.collection.on("add", this.addAndSelectThread);
        this.sidebar_padding = 10;
        this.boardName;
        this.template = _.template($("#thread-list-template").html());
        this.current_search = "";
        this.mode = 'all';
        this.searchAlertCollection = new Backbone.Collection([], {
          model: Backbone.Model
        });
        this.searchAlertCollection.on("add", function(searchAlert) {
          var content;
          content = _.template($("#search-alert-template").html(), {
            'message': searchAlert.attributes.message,
            'cid': searchAlert.cid
          });
          _this.$(".search-alerts").append(content);
          return _this.$("#search-alert-" + searchAlert.cid + " a.dismiss").bind("click", searchAlert, function(event) {
            return _this.removeSearchAlert(event.data.cid);
          });
        });
        this.searchAlertCollection.on("remove", function(searchAlert) {
          return _this.$("#search-alert-" + searchAlert.cid).remove();
        });
        return this.searchAlertCollection.on("reset", function() {
          return _this.$(".search-alerts").empty();
        });
      };

      DiscussionThreadListView.prototype.addSearchAlert = function(message) {
        var m;
        m = new Backbone.Model({
          "message": message
        });
        this.searchAlertCollection.add(m);
        return m;
      };

      DiscussionThreadListView.prototype.removeSearchAlert = function(searchAlert) {
        return this.searchAlertCollection.remove(searchAlert);
      };

      DiscussionThreadListView.prototype.clearSearchAlerts = function() {
        return this.searchAlertCollection.reset();
      };

      DiscussionThreadListView.prototype.reloadDisplayedCollection = function(thread) {
        var active, content, current_el, thread_id;
        this.clearSearchAlerts();
        thread_id = thread.get('id');
        content = this.renderThread(thread);
        current_el = this.$(".forum-nav-thread[data-id=" + thread_id + "]");
        active = current_el.has(".forum-nav-thread-link.is-active").length !== 0;
        current_el.replaceWith(content);
        this.showMetadataAccordingToSort();
        if (active) {
          return this.setActiveThread(thread_id);
        }
      };

      DiscussionThreadListView.prototype.addAndSelectThread = function(thread) {
        var commentable_id, menuItem,
          _this = this;
        commentable_id = thread.get("commentable_id");
        menuItem = this.$(".forum-nav-browse-menu-item[data-discussion-id]").filter(function() {
          return $(this).data("discussion-id").id === commentable_id;
        });
        this.setCurrentTopicDisplay(this.getPathText(menuItem));
        return this.retrieveDiscussion(commentable_id, function() {
          return _this.trigger("thread:created", thread.get('id'));
        });
      };

      DiscussionThreadListView.prototype.updateSidebar = function() {
        var amount, browseFilterHeight, discussionBody, discussionBottomOffset, discussionsBodyBottom, discussionsBodyTop, headerHeight, refineBarHeight, scrollTop, sidebar, sidebarHeight, topOffset, windowHeight;
        scrollTop = $(window).scrollTop();
        windowHeight = $(window).height();
        discussionBody = $(".discussion-column");
        discussionsBodyTop = discussionBody[0] ? discussionBody.offset().top : void 0;
        discussionsBodyBottom = discussionsBodyTop + discussionBody.outerHeight();
        sidebar = $(".forum-nav");
        if (scrollTop > discussionsBodyTop - this.sidebar_padding) {
          sidebar.css('top', scrollTop - discussionsBodyTop + this.sidebar_padding);
        } else {
          sidebar.css('top', '0');
        }
        sidebarHeight = windowHeight - Math.max(discussionsBodyTop - scrollTop, this.sidebar_padding);
        topOffset = scrollTop + windowHeight;
        discussionBottomOffset = discussionsBodyBottom + this.sidebar_padding;
        amount = Math.max(topOffset - discussionBottomOffset, 0);
        sidebarHeight = sidebarHeight - this.sidebar_padding - amount;
        sidebarHeight = Math.min(sidebarHeight + 1, discussionBody.outerHeight());
        sidebar.css('height', sidebarHeight);
        headerHeight = this.$(".forum-nav-header").outerHeight();
        refineBarHeight = this.$(".forum-nav-refine-bar").outerHeight();
        browseFilterHeight = this.$(".forum-nav-browse-filter").outerHeight();
        this.$('.forum-nav-thread-list').css('height', (sidebarHeight - headerHeight - refineBarHeight - 2) + 'px');
        return this.$('.forum-nav-browse-menu').css('height', (sidebarHeight - headerHeight - browseFilterHeight - 2) + 'px');
      };

      DiscussionThreadListView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      DiscussionThreadListView.prototype.render = function() {
        this.timer = 0;
        this.$el.html(this.template());
        this.$(".forum-nav-sort-control").val(this.collection.sort_preference);
        $(window).bind("load", this.updateSidebar);
        $(window).bind("scroll", this.updateSidebar);
        $(window).bind("resize", this.updateSidebar);
        this.displayedCollection.on("reset", this.renderThreads);
        this.displayedCollection.on("thread:remove", this.renderThreads);
        this.renderThreads();
        return this;
      };

      DiscussionThreadListView.prototype.renderThreads = function() {
        var content, rendered, thread, _i, _len, _ref1;
        this.$(".forum-nav-thread-list").html("");
        rendered = $("<div></div>");
        _ref1 = this.displayedCollection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          thread = _ref1[_i];
          content = this.renderThread(thread);
          rendered.append(content);
        }
        this.$(".forum-nav-thread-list").html(rendered.html());
        this.showMetadataAccordingToSort();
        this.renderMorePages();
        this.updateSidebar();
        return this.trigger("threads:rendered");
      };

      DiscussionThreadListView.prototype.showMetadataAccordingToSort = function() {
        var commentCounts, voteCounts;
        voteCounts = this.$(".forum-nav-thread-votes-count");
        commentCounts = this.$(".forum-nav-thread-comments-count");
        voteCounts.hide();
        commentCounts.hide();
        switch (this.$(".forum-nav-sort-control").val()) {
          case "date":
          case "comments":
            return commentCounts.show();
          case "votes":
            return voteCounts.show();
        }
      };

      DiscussionThreadListView.prototype.renderMorePages = function() {
        if (this.displayedCollection.hasMorePages()) {
          return this.$(".forum-nav-thread-list").append("<li class='forum-nav-load-more'><a href='#' class='forum-nav-load-more-link'>" + gettext("Load more") + "</a></li>");
        }
      };

      DiscussionThreadListView.prototype.getLoadingContent = function(srText) {
        return '<div class="forum-nav-loading" tabindex="0"><span class="icon-spinner icon-spin"/><span class="sr" role="alert">' + srText + '</span></div>';
      };

      DiscussionThreadListView.prototype.loadMorePages = function(event) {
        var error, lastThread, loadMoreElem, loadingElem, options, _ref1,
          _this = this;
        if (event) {
          event.preventDefault();
        }
        loadMoreElem = this.$(".forum-nav-load-more");
        loadMoreElem.html(this.getLoadingContent(gettext("Loading more threads")));
        loadingElem = loadMoreElem.find(".forum-nav-loading");
        DiscussionUtil.makeFocusTrap(loadingElem);
        loadingElem.focus();
        options = {};
        switch (this.mode) {
          case 'search':
            options.search_text = this.current_search;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'followed':
            options.user_id = window.user.id;
            options.group_id = "all";
            break;
          case 'commentables':
            options.commentable_ids = this.discussionIds;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'all':
            if (this.group_id) {
              options.group_id = this.group_id;
            }
        }
        lastThread = (_ref1 = this.collection.last()) != null ? _ref1.get('id') : void 0;
        if (lastThread) {
          this.once("threads:rendered", function() {
            return $(".forum-nav-thread[data-id='" + lastThread + "'] + .forum-nav-thread .forum-nav-thread-link").focus();
          });
        } else {
          this.once("threads:rendered", function() {
            var _ref2;
            return (_ref2 = $(".forum-nav-thread-link").first()) != null ? _ref2.focus() : void 0;
          });
        }
        error = function() {
          _this.renderThreads();
          return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading more threads. Please try again."));
        };
        return this.collection.retrieveAnotherPage(this.mode, options, {
          sort_key: this.$(".forum-nav-sort-control").val()
        }, error);
      };

      DiscussionThreadListView.prototype.renderThread = function(thread) {
        var content, unreadCount;
        content = $(_.template($("#thread-list-item-template").html())(thread.toJSON()));
        unreadCount = thread.get('unread_comments_count') + (thread.get("read") ? 0 : 1);
        if (unreadCount > 0) {
          content.find('.forum-nav-thread-comments-count').attr("data-tooltip", interpolate(ngettext('%(unread_count)s new comment', '%(unread_count)s new comments', unreadCount), {
            unread_count: unreadCount
          }, true));
        }
        return content;
      };

      DiscussionThreadListView.prototype.threadSelected = function(e) {
        var thread_id;
        thread_id = $(e.target).closest(".forum-nav-thread").attr("data-id");
        this.setActiveThread(thread_id);
        this.trigger("thread:selected", thread_id);
        return false;
      };

      DiscussionThreadListView.prototype.threadRemoved = function(thread_id) {
        return this.trigger("thread:removed", thread_id);
      };

      DiscussionThreadListView.prototype.setActiveThread = function(thread_id) {
        this.$(".forum-nav-thread[data-id!='" + thread_id + "'] .forum-nav-thread-link").removeClass("is-active");
        return this.$(".forum-nav-thread[data-id='" + thread_id + "'] .forum-nav-thread-link").addClass("is-active");
      };

      DiscussionThreadListView.prototype.goHome = function() {
        var thread_id, url,
          _this = this;
        this.template = _.template($("#discussion-home").html());
        $(".discussion-column").html(this.template);
        $(".forum-nav-thread-list a").removeClass("is-active");
        $("input.email-setting").bind("click", this.updateEmailNotifications);
        url = DiscussionUtil.urlFor("notifications_status", window.user.get("id"));
        DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            if (response.status) {
              return $('input.email-setting').attr('checked', 'checked');
            } else {
              return $('input.email-setting').removeAttr('checked');
            }
          }
        });
        thread_id = null;
        return this.trigger("thread:removed");
      };

      DiscussionThreadListView.prototype.isBrowseMenuVisible = function() {
        return this.$(".forum-nav-browse-menu-wrapper").is(":visible");
      };

      DiscussionThreadListView.prototype.showBrowseMenu = function() {
        if (!this.isBrowseMenuVisible()) {
          this.$(".forum-nav-browse").addClass("is-active");
          this.$(".forum-nav-browse-menu-wrapper").show();
          this.$(".forum-nav-thread-list-wrapper").hide();
          $(".forum-nav-browse-filter-input").focus();
          $("body").bind("click", this.hideBrowseMenu);
          return this.updateSidebar();
        }
      };

      DiscussionThreadListView.prototype.hideBrowseMenu = function() {
        if (this.isBrowseMenuVisible()) {
          this.$(".forum-nav-browse").removeClass("is-active");
          this.$(".forum-nav-browse-menu-wrapper").hide();
          this.$(".forum-nav-thread-list-wrapper").show();
          $("body").unbind("click", this.hideBrowseMenu);
          return this.updateSidebar();
        }
      };

      DiscussionThreadListView.prototype.toggleBrowseMenu = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.isBrowseMenuVisible()) {
          return this.hideBrowseMenu();
        } else {
          return this.showBrowseMenu();
        }
      };

      DiscussionThreadListView.prototype.getPathText = function(item) {
        var path, pathText, pathTitles;
        path = item.parents(".forum-nav-browse-menu-item").andSelf();
        pathTitles = path.children(".forum-nav-browse-title").map(function(i, elem) {
          return $(elem).text();
        }).get();
        return pathText = pathTitles.join(" / ");
      };

      DiscussionThreadListView.prototype.filterTopics = function(event) {
        var items, query,
          _this = this;
        query = $(event.target).val();
        items = this.$(".forum-nav-browse-menu-item");
        if (query.length === 0) {
          return items.show();
        } else {
          items.hide();
          return items.each(function(i, item) {
            var path, pathText;
            item = $(item);
            if (!item.is(":visible")) {
              pathText = _this.getPathText(item).toLowerCase();
              if (query.split(" ").every(function(term) {
                return pathText.search(term.toLowerCase()) !== -1;
              })) {
                path = item.parents(".forum-nav-browse-menu-item").andSelf();
                return path.add(item.find(".forum-nav-browse-menu-item")).show();
              }
            }
          });
        }
      };

      DiscussionThreadListView.prototype.setCurrentTopicDisplay = function(text) {
        return this.$(".forum-nav-browse-current").text(this.fitName(text));
      };

      DiscussionThreadListView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.$(".forum-nav-browse-current").css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      DiscussionThreadListView.prototype.fitName = function(name) {
        var partialName, path, prefix, rawName, width, x;
        this.maxNameWidth = this.$(".forum-nav-browse").width() - parseInt(this.$(".forum-nav-browse").css("padding-left")) - parseInt(this.$(".forum-nav-browse").css("padding-right")) - this.$(".forum-nav-browse .icon").outerWidth(true) - this.$(".forum-nav-browse-drop-arrow").outerWidth(true);
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        prefix = "";
        while (path.length > 1) {
          prefix = gettext("…") + "/";
          path.shift();
          partialName = prefix + path.join("/");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = prefix + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = prefix + rawName + gettext("…");
        }
        return name;
      };

      DiscussionThreadListView.prototype.selectTopic = function(event) {
        var allItems, discussionIds, item;
        event.preventDefault();
        this.hideBrowseMenu();
        this.clearSearch();
        item = $(event.target).closest('.forum-nav-browse-menu-item');
        this.setCurrentTopicDisplay(this.getPathText(item));
        if (item.hasClass("forum-nav-browse-menu-all")) {
          this.discussionIds = "";
          this.$('.forum-nav-filter-cohort').show();
          return this.retrieveAllThreads();
        } else if (item.hasClass("forum-nav-browse-menu-flagged")) {
          this.discussionIds = "";
          this.$('.forum-nav-filter-cohort').hide();
          return this.retrieveFlaggedThreads();
        } else if (item.hasClass("forum-nav-browse-menu-following")) {
          this.retrieveFollowed();
          return this.$('.forum-nav-filter-cohort').hide();
        } else {
          allItems = item.find(".forum-nav-browse-menu-item").andSelf();
          discussionIds = allItems.filter("[data-discussion-id]").map(function(i, elem) {
            return $(elem).data("discussion-id").id;
          }).get();
          this.retrieveDiscussions(discussionIds);
          return this.$(".forum-nav-filter-cohort").toggle(item.data('cohorted') === true);
        }
      };

      DiscussionThreadListView.prototype.chooseCohort = function(event) {
        this.group_id = this.$('.forum-nav-filter-cohort-control :selected').val();
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveDiscussion = function(discussion_id, callback) {
        var url,
          _this = this;
        if (callback == null) {
          callback = null;
        }
        url = DiscussionUtil.urlFor("retrieve_discussion", discussion_id);
        return DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            _this.collection.current_page = response.page;
            _this.collection.pages = response.num_pages;
            _this.collection.reset(response.discussion_data);
            Content.loadContentInfos(response.annotated_content_info);
            _this.displayedCollection.reset(_this.collection.models);
            if (callback != null) {
              return callback();
            }
          }
        });
      };

      DiscussionThreadListView.prototype.retrieveDiscussions = function(discussion_ids) {
        this.discussionIds = discussion_ids.join(',');
        this.mode = 'commentables';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveAllThreads = function() {
        this.mode = 'all';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveFirstPage = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveFlaggedThreads = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        this.mode = 'flagged';
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.sortThreads = function(event) {
        this.displayedCollection.setSortComparator(this.$(".forum-nav-sort-control").val());
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.performSearch = function(event) {
        var text;
        if (event.which === 13) {
          event.preventDefault();
          this.hideBrowseMenu();
          this.setCurrentTopicDisplay(gettext("Search Results"));
          text = this.$(".forum-nav-search-input").val();
          return this.searchFor(text);
        }
      };

      DiscussionThreadListView.prototype.searchFor = function(text) {
        var url,
          _this = this;
        this.clearSearchAlerts();
        this.mode = 'search';
        this.current_search = text;
        url = DiscussionUtil.urlFor("search");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".forum-nav-search-input"),
          data: {
            text: text
          },
          url: url,
          type: "GET",
          dataType: 'json',
          $loading: $,
          loadingCallback: function() {
            return _this.$(".forum-nav-thread-list").html("<li class='forum-nav-load-more'>" + _this.getLoadingContent(gettext("Loading thread list")) + "</li>");
          },
          loadedCallback: function() {
            return _this.$(".forum-nav-thread-list .forum-nav-load-more").remove();
          },
          success: function(response, textStatus) {
            var message;
            if (textStatus === 'success') {
              _this.collection.reset(response.discussion_data);
              Content.loadContentInfos(response.annotated_content_info);
              _this.collection.current_page = response.page;
              _this.collection.pages = response.num_pages;
              if (!_.isNull(response.corrected_text)) {
                message = interpolate(_.escape(gettext('No results found for %(original_query)s. Showing results for %(suggested_query)s.')), {
                  "original_query": "<em>" + _.escape(text) + "</em>",
                  "suggested_query": "<em>" + response.corrected_text + "</em>"
                }, true);
                _this.addSearchAlert(message);
              } else if (response.discussion_data.length === 0) {
                _this.addSearchAlert(gettext('No threads matched your query.'));
              }
              _this.displayedCollection.reset(_this.collection.models);
              if (text) {
                return _this.searchForUser(text);
              }
            }
          }
        });
      };

      DiscussionThreadListView.prototype.searchForUser = function(text) {
        var _this = this;
        return DiscussionUtil.safeAjax({
          data: {
            username: text
          },
          url: DiscussionUtil.urlFor("users"),
          type: "GET",
          dataType: 'json',
          error: function() {},
          success: function(response) {
            var message;
            if (response.users.length > 0) {
              message = interpolate(_.escape(gettext('Show posts by %(username)s.')), {
                "username": _.template('<a class="link-jump" href="<%= url %>"><%- username %></a>', {
                  url: DiscussionUtil.urlFor("user_profile", response.users[0].id),
                  username: response.users[0].username
                })
              }, true);
              return _this.addSearchAlert(message);
            }
          }
        });
      };

      DiscussionThreadListView.prototype.clearSearch = function() {
        this.$(".forum-nav-search-input").val("");
        return this.current_search = "";
      };

      DiscussionThreadListView.prototype.retrieveFollowed = function() {
        this.mode = 'followed';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.updateEmailNotifications = function() {
        var _this = this;
        if ($('input.email-setting').attr('checked')) {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("enable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').removeAttr('checked');
            }
          });
        } else {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("disable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').attr('checked', 'checked');
            }
          });
        }
      };

      return DiscussionThreadListView;

    }).call(this, Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadProfileView = (function(_super) {
      __extends(DiscussionThreadProfileView, _super);

      function DiscussionThreadProfileView() {
        _ref = DiscussionThreadProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadProfileView.prototype.render = function() {
        var element, params;
        this.template = DiscussionUtil.getTemplate("_profile_thread");
        this.convertMath();
        this.abbreviateBody();
        params = $.extend(this.model.toJSON(), {
          permalink: this.model.urlFor('retrieve')
        });
        if (!this.model.get('anonymous')) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        this.$el.html(Mustache.render(this.template, params));
        this.$("span.timeago").timeago();
        element = this.$(".post-body");
        MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
        return this;
      };

      DiscussionThreadProfileView.prototype.convertMath = function() {
        return this.model.set('markdownBody', DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(this.model.get('body'))));
      };

      DiscussionThreadProfileView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateHTML(this.model.get('markdownBody'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      return DiscussionThreadProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {
      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        this.unPin = __bind(this.unPin, this);
        this.pin = __bind(this.pin, this);
        this.togglePin = __bind(this.togglePin, this);
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderPinned = __bind(this.renderPinned, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadShowView.prototype.events = {
        "click .vote-btn": function(event) {
          return this.toggleVote(event);
        },
        "keydown .vote-btn": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleVote);
        },
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "keydown .discussion-flag-abuse": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFlagAbuse);
        },
        "click .admin-pin": function(event) {
          return this.togglePin(event);
        },
        "keydown .admin-pin": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.togglePin);
        },
        "click .action-follow": "toggleFollowing",
        "keydown .action-follow": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFollowing);
        },
        "click .action-edit": "edit",
        "click .action-delete": "_delete",
        "click .action-openclose": "toggleClosed"
      };

      DiscussionThreadShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadShowView.prototype.initialize = function() {
        DiscussionThreadShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-show-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderVote();
        this.renderFlagged();
        this.renderPinned();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "true");
          this.$(".discussion-flag-abuse").attr("data-tooltip", gettext("Click to remove report"));
          /*
          Translators: The text between start_sr_span and end_span is not shown
          in most browsers but will be read by screen readers.
          */

          return this.$(".discussion-flag-abuse .flag-label").html(interpolate(gettext("Misuse Reported%(start_sr_span)s, click to remove report%(end_span)s"), {
            "start_sr_span": "<span class='sr'>",
            "end_span": "</span>"
          }, true));
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "false");
          return this.$(".discussion-flag-abuse .flag-label").html(gettext("Report Misuse"));
        }
      };

      DiscussionThreadShowView.prototype.renderPinned = function() {
        var pinElem, pinLabelElem;
        pinElem = this.$(".discussion-pin");
        pinLabelElem = pinElem.find(".pin-label");
        if (this.model.get("pinned")) {
          pinElem.addClass("pinned");
          pinElem.removeClass("notpinned");
          if (this.model.can("can_openclose")) {
            /*
            Translators: The text between start_sr_span and end_span is not shown
            in most browsers but will be read by screen readers.
            */

            pinLabelElem.html(interpolate(gettext("Pinned%(start_sr_span)s, click to unpin%(end_span)s"), {
              "start_sr_span": "<span class='sr'>",
              "end_span": "</span>"
            }, true));
            pinElem.attr("data-tooltip", gettext("Click to unpin"));
            return pinElem.attr("aria-pressed", "true");
          } else {
            pinLabelElem.html(gettext("Pinned"));
            pinElem.removeAttr("data-tooltip");
            return pinElem.removeAttr("aria-pressed");
          }
        } else {
          pinElem.removeClass("pinned");
          pinElem.addClass("notpinned");
          pinLabelElem.html(gettext("Pin Thread"));
          pinElem.removeAttr("data-tooltip");
          return pinElem.attr("aria-pressed", "false");
        }
      };

      DiscussionThreadShowView.prototype.updateModelDetails = function() {
        this.renderVote();
        this.renderFlagged();
        return this.renderPinned();
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.togglePin = function(event) {
        event.preventDefault();
        if (this.model.get('pinned')) {
          return this.unPin();
        } else {
          return this.pin();
        }
      };

      DiscussionThreadShowView.prototype.pin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("pinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', true);
            }
          },
          error: function() {
            return DiscussionUtil.discussionAlert("Sorry", "We had some trouble pinning this thread. Please try again.");
          }
        });
      };

      DiscussionThreadShowView.prototype.unPin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unPinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', false);
            }
          },
          error: function() {
            return DiscussionUtil.discussionAlert("Sorry", "We had some trouble unpinning this thread. Please try again.");
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentView);
    this.DiscussionThreadInlineShowView = (function(_super) {
      __extends(DiscussionThreadInlineShowView, _super);

      function DiscussionThreadInlineShowView() {
        _ref1 = DiscussionThreadInlineShowView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      DiscussionThreadInlineShowView.prototype.renderTemplate = function() {
        var params;
        this.template = DiscussionUtil.getTemplate('_inline_thread_show');
        params = this.model.toJSON();
        if (this.model.get('username') != null) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        return Mustache.render(this.template, params);
      };

      return DiscussionThreadInlineShowView;

    })(DiscussionThreadShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadView = (function(_super) {
      var INITIAL_RESPONSE_PAGE_SIZE, SUBSEQUENT_RESPONSE_PAGE_SIZE;

      __extends(DiscussionThreadView, _super);

      function DiscussionThreadView() {
        this._delete = __bind(this._delete, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.endorseThread = __bind(this.endorseThread, this);
        this.addComment = __bind(this.addComment, this);
        this.renderResponse = __bind(this.renderResponse, this);
        this.renderResponseCountAndPagination = __bind(this.renderResponseCountAndPagination, this);
        _ref = DiscussionThreadView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      INITIAL_RESPONSE_PAGE_SIZE = 25;

      SUBSEQUENT_RESPONSE_PAGE_SIZE = 100;

      DiscussionThreadView.prototype.events = {
        "click .discussion-submit-post": "submitComment",
        "click .add-response-btn": "scrollToAddResponse"
      };

      DiscussionThreadView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadView.prototype.initialize = function() {
        DiscussionThreadView.__super__.initialize.call(this);
        this.createShowView();
        return this.responses = new Comments();
      };

      DiscussionThreadView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadView.prototype.render = function() {
        var _this = this;
        this.$el.html(this.renderTemplate());
        this.initLocal();
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.makeWmdEditor("reply-body");
        this.renderAddResponseButton();
        this.responses.on("add", this.renderResponse);
        setTimeout((function() {
          return _this.loadInitialResponses();
        }), 100);
        return this;
      };

      DiscussionThreadView.prototype.cleanup = function() {
        if (this.responsesRequest != null) {
          return this.responsesRequest.abort();
        }
      };

      DiscussionThreadView.prototype.loadResponses = function(responseLimit, elem, firstLoad) {
        var _this = this;
        return this.responsesRequest = DiscussionUtil.safeAjax({
          url: DiscussionUtil.urlFor('retrieve_single_thread', this.model.get('commentable_id'), this.model.id),
          data: {
            resp_skip: this.responses.size(),
            resp_limit: responseLimit ? responseLimit : void 0
          },
          $elem: elem,
          $loading: elem,
          takeFocus: true,
          complete: function() {
            return _this.responseRequest = null;
          },
          success: function(data, textStatus, xhr) {
            Content.loadContentInfos(data['annotated_content_info']);
            _this.responses.add(data['content']['children']);
            _this.renderResponseCountAndPagination(data['content']['resp_total']);
            return _this.trigger("thread:responses:rendered");
          },
          error: function(xhr) {
            if (xhr.status === 404) {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("The thread you selected has been deleted. Please select another thread."));
            } else if (firstLoad) {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading responses. Please reload the page."));
            } else {
              return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading more responses. Please try again."));
            }
          }
        });
      };

      DiscussionThreadView.prototype.loadInitialResponses = function() {
        return this.loadResponses(INITIAL_RESPONSE_PAGE_SIZE, this.$el.find(".responses"), true);
      };

      DiscussionThreadView.prototype.renderResponseCountAndPagination = function(responseTotal) {
        var buttonText, loadMoreButton, responseLimit, responsePagination, responsesRemaining, showingResponsesText,
          _this = this;
        this.$el.find(".response-count").html(interpolate(ngettext("%(numResponses)s response", "%(numResponses)s responses", responseTotal), {
          numResponses: responseTotal
        }, true));
        responsePagination = this.$el.find(".response-pagination");
        responsePagination.empty();
        if (responseTotal > 0) {
          responsesRemaining = responseTotal - this.responses.size();
          showingResponsesText = responsesRemaining === 0 ? gettext("Showing all responses") : interpolate(ngettext("Showing first response", "Showing first %(numResponses)s responses", this.responses.size()), {
            numResponses: this.responses.size()
          }, true);
          responsePagination.append($("<span>").addClass("response-display-count").html(_.escape(showingResponsesText)));
          if (responsesRemaining > 0) {
            if (responsesRemaining < SUBSEQUENT_RESPONSE_PAGE_SIZE) {
              responseLimit = null;
              buttonText = gettext("Load all responses");
            } else {
              responseLimit = SUBSEQUENT_RESPONSE_PAGE_SIZE;
              buttonText = interpolate(gettext("Load next %(numResponses)s responses"), {
                numResponses: responseLimit
              }, true);
            }
            loadMoreButton = $("<button>").addClass("load-response-button").html(_.escape(buttonText));
            loadMoreButton.click(function(event) {
              return _this.loadResponses(responseLimit, loadMoreButton);
            });
            return responsePagination.append(loadMoreButton);
          }
        }
      };

      DiscussionThreadView.prototype.renderResponse = function(response) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView({
          model: response
        });
        view.on("comment:add", this.addComment);
        view.on("comment:endorse", this.endorseThread);
        view.render();
        this.$el.find(".responses").append(view.el);
        return view.afterInsert();
      };

      DiscussionThreadView.prototype.renderAddResponseButton = function() {
        if (this.model.hasResponses() && this.model.can('can_reply')) {
          return this.$el.find('div.add-response').show();
        } else {
          return this.$el.find('div.add-response').hide();
        }
      };

      DiscussionThreadView.prototype.scrollToAddResponse = function(event) {
        var form;
        event.preventDefault();
        form = $(event.target).parents('article.discussion-article').find('form.discussion-reply-new');
        $('html, body').scrollTop(form.offset().top);
        return form.find('.wmd-panel textarea').focus();
      };

      DiscussionThreadView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadView.prototype.endorseThread = function(endorsed) {
        var is_endorsed;
        is_endorsed = this.$el.find(".is-endorsed").length;
        return this.model.set('endorsed', is_endorsed);
      };

      DiscussionThreadView.prototype.submitComment = function(event) {
        var body, comment, url,
          _this = this;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("reply-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("reply-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          votes: {
            up_count: 0
          },
          abuse_flaggers: [],
          endorsed: false,
          user_id: window.user.get("id")
        });
        comment.set('thread', this.model.get('thread'));
        this.renderResponse(comment);
        this.model.addComment();
        this.renderAddResponseButton();
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(data, textStatus) {
            comment.updateInfo(data.annotated_content_info);
            return comment.set(data.content);
          }
        });
      };

      DiscussionThreadView.prototype.edit = function(event) {
        this.createEditView();
        return this.renderEditView();
      };

      DiscussionThreadView.prototype.update = function(event) {
        var newBody, newTitle, url,
          _this = this;
        newTitle = this.editView.$(".edit-post-title").val();
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_thread', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: newTitle,
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-title").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              title: newTitle,
              body: newBody
            });
            _this.createShowView();
            return _this.renderShowView();
          }
        });
      };

      DiscussionThreadView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new DiscussionThreadEditView({
          model: this.model
        });
        this.editView.bind("thread:update", this.update);
        return this.editView.bind("thread:cancel_edit", this.cancelEdit);
      };

      DiscussionThreadView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.thread-content-wrapper'));
        view.render();
        return view.delegateEvents();
      };

      DiscussionThreadView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      DiscussionThreadView.prototype.getShowViewClass = function() {
        return DiscussionThreadShowView;
      };

      DiscussionThreadView.prototype.createShowView = function() {
        var showViewClass;
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        showViewClass = this.getShowViewClass();
        this.showView = new showViewClass({
          model: this.model
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      DiscussionThreadView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        return this.renderShowView();
      };

      DiscussionThreadView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        url = this.model.urlFor('_delete');
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this post?"))) {
          return;
        }
        this.model.remove();
        this.showView.undelegateEvents();
        this.undelegateEvents();
        this.$el.empty();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      return DiscussionThreadView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadInlineView = (function(_super) {
      var expanded;

      __extends(DiscussionThreadInlineView, _super);

      function DiscussionThreadInlineView() {
        this.expandPost = __bind(this.expandPost, this);
        _ref = DiscussionThreadInlineView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      expanded = false;

      DiscussionThreadInlineView.prototype.events = {
        "click .discussion-submit-post": "submitComment",
        "click .expand-post": "expandPost",
        "click .collapse-post": "collapsePost",
        "click .add-response-btn": "scrollToAddResponse"
      };

      DiscussionThreadInlineView.prototype.initialize = function() {
        return DiscussionThreadInlineView.__super__.initialize.call(this);
      };

      DiscussionThreadInlineView.prototype.initLocal = function() {
        this.$local = this.$el.children(".discussion-article").children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionThreadInlineView.prototype.renderTemplate = function() {
        var params;
        if (this.model.has('group_id')) {
          this.template = DiscussionUtil.getTemplate("_inline_thread_cohorted");
        } else {
          this.template = DiscussionUtil.getTemplate("_inline_thread");
        }
        if (!this.model.has('abbreviatedBody')) {
          this.abbreviateBody();
        }
        params = this.model.toJSON();
        return Mustache.render(this.template, params);
      };

      DiscussionThreadInlineView.prototype.render = function() {
        DiscussionThreadInlineView.__super__.render.call(this);
        this.$el.find('.post-extended-content').hide();
        return this.$el.find('.collapse-post').hide();
      };

      DiscussionThreadInlineView.prototype.getShowViewClass = function() {
        return DiscussionThreadInlineShowView;
      };

      DiscussionThreadInlineView.prototype.loadInitialResponses = function() {
        if (this.expanded) {
          return DiscussionThreadInlineView.__super__.loadInitialResponses.call(this);
        }
      };

      DiscussionThreadInlineView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateString(this.model.get('body'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      DiscussionThreadInlineView.prototype.expandPost = function(event) {
        this.$el.addClass('expanded');
        this.$el.find('.post-body').html(this.model.get('body'));
        this.showView.convertMath();
        this.$el.find('.expand-post').css('display', 'none');
        this.$el.find('.collapse-post').css('display', 'block');
        this.$el.find('.post-extended-content').show();
        if (!this.expanded) {
          this.expanded = true;
          return this.loadInitialResponses();
        }
      };

      DiscussionThreadInlineView.prototype.collapsePost = function(event) {
        var curScroll, postTop;
        curScroll = $(window).scrollTop();
        postTop = this.$el.offset().top;
        if (postTop < curScroll) {
          $('html, body').animate({
            scrollTop: postTop
          });
        }
        this.$el.removeClass('expanded');
        this.$el.find('.post-body').html(this.model.get('abbreviatedBody'));
        this.showView.convertMath();
        this.$el.find('.expand-post').css('display', 'block');
        this.$el.find('.collapse-post').css('display', 'none');
        return this.$el.find('.post-extended-content').hide();
      };

      DiscussionThreadInlineView.prototype.createEditView = function() {
        DiscussionThreadInlineView.__super__.createEditView.call(this);
        return this.editView.bind("thread:update", this.abbreviateBody);
      };

      return DiscussionThreadInlineView;

    })(DiscussionThreadView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        this.render = __bind(this.render, this);
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.events = {
        "click .discussion-paginator a": "changePage"
      };

      DiscussionUserProfileView.prototype.initialize = function(options) {
        DiscussionUserProfileView.__super__.initialize.call(this);
        this.page = options.page;
        this.numPages = options.numPages;
        this.discussion = new Discussion();
        this.discussion.on("reset", this.render);
        return this.discussion.reset(this.collection, {
          silent: false
        });
      };

      DiscussionUserProfileView.prototype.render = function() {
        var baseUri, pageUrlFunc, paginationParams, paginationTemplate, profileTemplate;
        profileTemplate = $("script#_user_profile").html();
        this.$el.html(Mustache.render(profileTemplate, {
          threads: this.discussion.models
        }));
        this.discussion.map(function(thread) {
          return new DiscussionThreadProfileView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          }).render();
        });
        baseUri = URI(window.location).removeSearch("page");
        pageUrlFunc = function(page) {
          return baseUri.clone().addSearch("page", page);
        };
        paginationParams = DiscussionUtil.getPaginationParams(this.page, this.numPages, pageUrlFunc);
        paginationTemplate = $("script#_pagination").html();
        return this.$el.find(".pagination").html(Mustache.render(paginationTemplate, paginationParams));
      };

      DiscussionUserProfileView.prototype.changePage = function(event) {
        var url,
          _this = this;
        event.preventDefault();
        url = $(event.target).attr("href");
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          $loading: $(event.target),
          takeFocus: true,
          url: url,
          type: "GET",
          dataType: "json",
          success: function(response, textStatus, xhr) {
            _this.page = response.page;
            _this.numPages = response.num_pages;
            _this.discussion.reset(response.discussion_data, {
              silent: false
            });
            return history.pushState({}, "", url);
          },
          error: function() {
            return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble loading the page you requested. Please try again."));
          }
        });
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostView = (function(_super) {
      __extends(NewPostView, _super);

      function NewPostView() {
        this.hideTopicDropdown = __bind(this.hideTopicDropdown, this);
        _ref = NewPostView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostView.prototype.initialize = function(options) {
        var _ref1;
        this.mode = options.mode || "inline";
        if ((_ref1 = this.mode) !== "tab" && _ref1 !== "inline") {
          throw new Error("invalid mode: " + this.mode);
        }
        this.course_settings = options.course_settings;
        this.maxNameWidth = 100;
        return this.topicId = options.topicId;
      };

      NewPostView.prototype.render = function() {
        if (this.mode === "tab") {
          this.$el.html(_.template($("#new-post-tab-template").html(), {
            topic_dropdown_html: this.getTopicDropdownHTML(),
            options_html: this.getOptionsHTML(),
            editor_html: this.getEditorHTML()
          }));
          this.dropdownButton = this.$(".topic_dropdown_button");
          this.topicMenu = this.$(".topic_menu_wrapper");
          this.menuOpen = this.dropdownButton.hasClass('dropped');
          this.topicId = this.$(".topic").first().data("discussion_id");
          this.topicText = this.getFullTopicName(this.$(".topic").first());
          if (!this.$(".topic_menu li a").first().is("[cohorted=true]")) {
            $('.choose-cohort').hide();
          }
          this.setSelectedTopic();
        } else {
          this.$el.html(_.template($("#new-post-inline-template").html(), {
            options_html: this.getOptionsHTML(),
            editor_html: this.getEditorHTML()
          }));
        }
        return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "new-post-body");
      };

      NewPostView.prototype.getTopicDropdownHTML = function() {
        var topics_html, _renderCategoryMap;
        _renderCategoryMap = function(map) {
          var category_template, entry, entry_template, html, name, _i, _len, _ref1;
          category_template = _.template($("#new-post-menu-category-template").html());
          entry_template = _.template($("#new-post-menu-entry-template").html());
          html = "";
          _ref1 = map.children;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            name = _ref1[_i];
            if (name in map.entries) {
              entry = map.entries[name];
              html += entry_template({
                text: name,
                id: entry.id,
                is_cohorted: entry.is_cohorted
              });
            } else {
              html += category_template({
                text: name,
                entries: _renderCategoryMap(map.subcategories[name])
              });
            }
          }
          return html;
        };
        topics_html = _renderCategoryMap(this.course_settings.get("category_map"));
        return _.template($("#new-post-topic-dropdown-template").html(), {
          topics_html: topics_html
        });
      };

      NewPostView.prototype.getEditorHTML = function() {
        return _.template($("#new-post-editor-template").html(), {});
      };

      NewPostView.prototype.getOptionsHTML = function() {
        var cohort_options, context, user_cohort_id;
        if (this.course_settings.get("is_cohorted") && DiscussionUtil.isStaff()) {
          user_cohort_id = $("#discussion-container").data("user-cohort-id");
          cohort_options = _.map(this.course_settings.get("cohorts"), function(cohort) {
            return {
              value: cohort.id,
              text: cohort.name,
              selected: cohort.id === user_cohort_id
            };
          });
        } else {
          cohort_options = null;
        }
        context = _.clone(this.course_settings.attributes);
        context.cohort_options = cohort_options;
        return _.template($("#new-post-options-template").html(), context);
      };

      NewPostView.prototype.events = {
        "submit .new-post-form": "createPost",
        "click  .topic_dropdown_button": "toggleTopicDropdown",
        "click  .topic_menu_wrapper": "setTopic",
        "click  .topic_menu_search": "ignoreClick",
        "keyup .form-topic-drop-search-input": DiscussionFilter.filterDrop
      };

      NewPostView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, title, url,
          _this = this;
        event.preventDefault();
        title = this.$(".new-post-title").val();
        body = this.$(".new-post-body").find(".wmd-input").val();
        group = this.$(".new-post-group option:selected").attr("value");
        anonymous = false || this.$("input.discussion-anonymous").is(":checked");
        anonymous_to_peers = false || this.$("input.discussion-anonymous-to-peers").is(":checked");
        follow = false || this.$("input.discussion-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: title,
            body: body,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow,
            group_id: group
          },
          error: DiscussionUtil.formErrorHandler(this.$(".new-post-form-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".new-post-form-errors"));
            _this.$el.hide();
            _this.$(".new-post-title").val("").attr("prev-text", "");
            _this.$(".new-post-body textarea").val("").attr("prev-text", "");
            _this.$(".wmd-preview p").html("");
            return _this.collection.add(thread);
          }
        });
      };

      NewPostView.prototype.toggleTopicDropdown = function(event) {
        event.stopPropagation();
        if (this.menuOpen) {
          return this.hideTopicDropdown();
        } else {
          return this.showTopicDropdown();
        }
      };

      NewPostView.prototype.showTopicDropdown = function() {
        this.menuOpen = true;
        this.dropdownButton.addClass('dropped');
        this.topicMenu.show();
        $(".form-topic-drop-search-input").focus();
        $("body").bind("keydown", this.setActiveItem);
        $("body").bind("click", this.hideTopicDropdown);
        return this.maxNameWidth = this.dropdownButton.width() - 40;
      };

      NewPostView.prototype.hideTopicDropdown = function() {
        this.menuOpen = false;
        this.dropdownButton.removeClass('dropped');
        this.topicMenu.hide();
        $("body").unbind("keydown", this.setActiveItem);
        return $("body").unbind("click", this.hideTopicDropdown);
      };

      NewPostView.prototype.setTopic = function(event) {
        var $target;
        $target = $(event.target);
        if ($target.data('discussion_id')) {
          this.topicText = $target.html();
          this.topicText = this.getFullTopicName($target);
          this.topicId = $target.data('discussion_id');
          this.setSelectedTopic();
          if ($target.is('[cohorted=true]')) {
            return $('.choose-cohort').show();
          } else {
            return $('.choose-cohort').hide();
          }
        }
      };

      NewPostView.prototype.setSelectedTopic = function() {
        return this.dropdownButton.html(this.fitName(this.topicText) + ' <span class="drop-arrow">▾</span>');
      };

      NewPostView.prototype.getFullTopicName = function(topicElement) {
        var name;
        name = topicElement.html();
        topicElement.parents('ul').not('.topic_menu').each(function() {
          return name = $(this).siblings('a').text() + ' / ' + name;
        });
        return name;
      };

      NewPostView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.dropdownButton.css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      NewPostView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = gettext("…") + " / " + path.join(" / ");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = gettext("…") + " / " + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = gettext("…") + " / " + rawName + " " + gettext("…");
        }
        return name;
      };

      NewPostView.prototype.setActiveItem = function(event) {
        var index, itemFromTop, itemTop, items, scrollTarget, scrollTop;
        if (event.which === 13) {
          $(".topic_menu_wrapper .focused").click();
          return;
        }
        if (event.which !== 40 && event.which !== 38) {
          return;
        }
        event.preventDefault();
        items = $.makeArray($(".topic_menu_wrapper a").not(".hidden"));
        index = items.indexOf($('.topic_menu_wrapper .focused')[0]);
        if (event.which === 40) {
          index = Math.min(index + 1, items.length - 1);
        }
        if (event.which === 38) {
          index = Math.max(index - 1, 0);
        }
        $(".topic_menu_wrapper .focused").removeClass("focused");
        $(items[index]).addClass("focused");
        itemTop = $(items[index]).parent().offset().top;
        scrollTop = $(".topic_menu").scrollTop();
        itemFromTop = $(".topic_menu").offset().top - itemTop;
        scrollTarget = Math.min(scrollTop - itemFromTop, scrollTop);
        scrollTarget = Math.max(scrollTop - itemFromTop - $(".topic_menu").height() + $(items[index]).height() + 20, scrollTarget);
        return $(".topic_menu").scrollTop(scrollTarget);
      };

      return NewPostView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentEditView = (function(_super) {
      __extends(ResponseCommentEditView, _super);

      function ResponseCommentEditView() {
        _ref = ResponseCommentEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ResponseCommentEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentEditView.prototype.initialize = function() {
        return ResponseCommentEditView.__super__.initialize.call(this);
      };

      ResponseCommentEditView.prototype.render = function() {
        this.template = _.template($("#response-comment-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-comment-body");
        return this;
      };

      ResponseCommentEditView.prototype.update = function(event) {
        return this.trigger("comment:update", event);
      };

      ResponseCommentEditView.prototype.cancel_edit = function(event) {
        return this.trigger("comment:cancel_edit", event);
      };

      return ResponseCommentEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {
      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        this.edit = __bind(this.edit, this);
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        this._delete = __bind(this._delete, this);
        _ref = ResponseCommentShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentShowView.prototype.events = {
        "click .action-delete": function(event) {
          return this._delete(event);
        },
        "keydown .action-delete": function(event) {
          return DiscussionUtil.activateOnSpace(event, this._delete);
        },
        "click .action-edit": function(event) {
          return this.edit(event);
        },
        "keydown .action-edit": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.edit);
        }
      };

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.initialize = function() {
        ResponseCommentShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ResponseCommentShowView.prototype.abilityRenderer = {
        can_delete: {
          enable: function() {
            return this.$(".action-delete").show();
          },
          disable: function() {
            return this.$(".action-delete").hide();
          }
        },
        editable: {
          enable: function() {
            return this.$(".action-edit").show();
          },
          disable: function() {
            return this.$(".action-edit").hide();
          }
        }
      };

      ResponseCommentShowView.prototype.render = function() {
        var params;
        this.template = _.template($("#response-comment-show-template").html());
        params = this.model.toJSON();
        this.$el.html(this.template(params));
        this.initLocal();
        this.delegateEvents();
        this.renderAttrs();
        this.renderFlagged();
        this.markAsStaff();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref1;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref1 = this.model.parent.get('username')) != null ? _ref1 : gettext("anonymous");
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="staff-label">' + gettext('staff') + '</span>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="community-ta-label">' + gettext('Community TA') + '</span>');
        }
      };

      ResponseCommentShowView.prototype._delete = function(event) {
        return this.trigger("comment:_delete", event);
      };

      ResponseCommentShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "true");
          this.$(".discussion-flag-abuse").attr("data-tooltip", gettext("Misuse Reported, click to remove report"));
          return this.$(".discussion-flag-abuse .flag-label").html(gettext("Misuse Reported, click to remove report"));
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "false");
          this.$(".discussion-flag-abuse").attr("data-tooltip", gettext("Report Misuse"));
          return this.$(".discussion-flag-abuse .flag-label").html(gettext("Report Misuse"));
        }
      };

      ResponseCommentShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      ResponseCommentShowView.prototype.edit = function(event) {
        return this.trigger("comment:edit", event);
      };

      return ResponseCommentShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentView = (function(_super) {
      __extends(ResponseCommentView, _super);

      function ResponseCommentView() {
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this._delete = __bind(this._delete, this);
        _ref = ResponseCommentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentView.prototype.tagName = "li";

      ResponseCommentView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentView.prototype.initialize = function() {
        return ResponseCommentView.__super__.initialize.call(this);
      };

      ResponseCommentView.prototype.render = function() {
        this.renderShowView();
        return this;
      };

      ResponseCommentView.prototype.renderSubView = function(view) {
        view.setElement(this.$el);
        view.render();
        return view.delegateEvents();
      };

      ResponseCommentView.prototype.renderShowView = function() {
        if (this.showView == null) {
          if (this.editView != null) {
            this.editView.undelegateEvents();
            this.editView.$el.empty();
            this.editView = null;
          }
          this.showView = new ResponseCommentShowView({
            model: this.model
          });
          this.showView.bind("comment:_delete", this._delete);
          this.showView.bind("comment:edit", this.edit);
          return this.renderSubView(this.showView);
        }
      };

      ResponseCommentView.prototype.renderEditView = function() {
        if (this.editView == null) {
          if (this.showView != null) {
            this.showView.undelegateEvents();
            this.showView.$el.empty();
            this.showView = null;
          }
          this.editView = new ResponseCommentEditView({
            model: this.model
          });
          this.editView.bind("comment:update", this.update);
          this.editView.bind("comment:cancel_edit", this.cancelEdit);
          return this.renderSubView(this.editView);
        }
      };

      ResponseCommentView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this comment?"))) {
          return;
        }
        url = this.model.urlFor('_delete');
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.remove();
            return _this.$el.remove();
          },
          error: function() {
            return DiscussionUtil.discussionAlert(gettext("Sorry"), gettext("We had some trouble deleting this comment. Please try again."));
          }
        });
      };

      ResponseCommentView.prototype.cancelEdit = function(event) {
        this.trigger("comment:cancel_edit", event);
        return this.renderShowView();
      };

      ResponseCommentView.prototype.edit = function(event) {
        this.trigger("comment:edit", event);
        return this.renderEditView();
      };

      ResponseCommentView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-comment-body textarea").val();
        url = DiscussionUtil.urlFor("update_comment", this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: $(event.target),
          url: url,
          type: "POST",
          dataType: "json",
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-comment-form-errors")),
          success: function(response, textStatus) {
            _this.model.set("body", newBody);
            return _this.cancelEdit();
          }
        });
      };

      return ResponseCommentView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseEditView = (function(_super) {
      __extends(ThreadResponseEditView, _super);

      function ThreadResponseEditView() {
        _ref = ThreadResponseEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ThreadResponseEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseEditView.prototype.initialize = function() {
        return ThreadResponseEditView.__super__.initialize.call(this);
      };

      ThreadResponseEditView.prototype.render = function() {
        this.template = _.template($("#thread-response-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      ThreadResponseEditView.prototype.update = function(event) {
        return this.trigger("response:update", event);
      };

      ThreadResponseEditView.prototype.cancel_edit = function(event) {
        return this.trigger("response:cancel_edit", event);
      };

      return ThreadResponseEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseShowView = (function(_super) {
      __extends(ThreadResponseShowView, _super);

      function ThreadResponseShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ThreadResponseShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseShowView.prototype.events = {
        "click .vote-btn": function(event) {
          return this.toggleVote(event);
        },
        "keydown .vote-btn": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleVote);
        },
        "click .action-endorse": "toggleEndorse",
        "click .action-delete": "_delete",
        "click .action-edit": "edit",
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "keydown .discussion-flag-abuse": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFlagAbuse);
        }
      };

      ThreadResponseShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseShowView.prototype.initialize = function() {
        ThreadResponseShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ThreadResponseShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-response-show-template").html());
        return this.template(this.model.toJSON());
      };

      ThreadResponseShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderVote();
        this.renderAttrs();
        this.renderFlagged();
        this.$el.find(".posted-details").timeago();
        this.convertMath();
        this.markAsStaff();
        return this;
      };

      ThreadResponseShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".response-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      ThreadResponseShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          this.$el.addClass("staff");
          return this.$el.prepend('<div class="staff-banner">' + gettext('staff') + '</div>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          this.$el.addClass("community-ta");
          return this.$el.prepend('<div class="community-ta-banner">' + gettext('Community TA') + '</div>');
        }
      };

      ThreadResponseShowView.prototype.edit = function(event) {
        return this.trigger("response:edit", event);
      };

      ThreadResponseShowView.prototype._delete = function(event) {
        return this.trigger("response:_delete", event);
      };

      ThreadResponseShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url;
        event.preventDefault();
        if (!this.model.can('can_endorse')) {
          return;
        }
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        this.model.set('endorsed', !endorsed);
        this.trigger("comment:endorse", !endorsed);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST"
        });
      };

      ThreadResponseShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "true");
          this.$(".discussion-flag-abuse").attr("data-tooltip", gettext("Misuse Reported, click to remove report"));
          /*
          Translators: The text between start_sr_span and end_span is not shown
          in most browsers but will be read by screen readers.
          */

          return this.$(".discussion-flag-abuse .flag-label").html(interpolate(gettext("Misuse Reported%(start_sr_span)s, click to remove report%(end_span)s"), {
            "start_sr_span": "<span class='sr'>",
            "end_span": "</span>"
          }, true));
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "false");
          return this.$(".discussion-flag-abuse .flag-label").html(gettext("Report Misuse"));
        }
      };

      ThreadResponseShowView.prototype.updateModelDetails = function() {
        this.renderVote();
        return this.renderFlagged();
      };

      return ThreadResponseShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseView = (function(_super) {
      __extends(ThreadResponseView, _super);

      function ThreadResponseView() {
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this._delete = __bind(this._delete, this);
        this.renderComment = __bind(this.renderComment, this);
        _ref = ThreadResponseView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseView.prototype.tagName = "li";

      ThreadResponseView.prototype.events = {
        "click .discussion-submit-comment": "submitComment",
        "focus .wmd-input": "showEditorChrome"
      };

      ThreadResponseView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseView.prototype.initialize = function() {
        return this.createShowView();
      };

      ThreadResponseView.prototype.renderTemplate = function() {
        var templateData, _ref1;
        this.template = _.template($("#thread-response-template").html());
        templateData = this.model.toJSON();
        templateData.wmdId = (_ref1 = this.model.id) != null ? _ref1 : (new Date()).getTime();
        return this.template(templateData);
      };

      ThreadResponseView.prototype.render = function() {
        this.$el.addClass("response_" + this.model.get("id"));
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.renderComments();
        return this;
      };

      ThreadResponseView.prototype.afterInsert = function() {
        this.makeWmdEditor("comment-body");
        return this.hideEditorChrome();
      };

      ThreadResponseView.prototype.hideEditorChrome = function() {
        this.$('.wmd-button-row').hide();
        this.$('.wmd-preview-container').hide();
        this.$('.wmd-input').css({
          height: '35px',
          padding: '5px'
        });
        return this.$('.comment-post-control').hide();
      };

      ThreadResponseView.prototype.showEditorChrome = function() {
        this.$('.wmd-button-row').show();
        this.$('.wmd-preview-container').show();
        this.$('.comment-post-control').show();
        return this.$('.wmd-input').css({
          height: '125px',
          padding: '10px'
        });
      };

      ThreadResponseView.prototype.renderComments = function() {
        var collectComments, comments,
          _this = this;
        comments = new Comments();
        this.commentViews = [];
        comments.comparator = function(comment) {
          return comment.get('created_at');
        };
        collectComments = function(comment) {
          var children;
          comments.add(comment);
          children = new Comments(comment.get('children'));
          return children.each(function(child) {
            child.parent = comment;
            return collectComments(child);
          });
        };
        this.model.get('comments').each(collectComments);
        return comments.each(function(comment) {
          return _this.renderComment(comment, false, null);
        });
      };

      ThreadResponseView.prototype.renderComment = function(comment) {
        var view,
          _this = this;
        comment.set('thread', this.model.get('thread'));
        view = new ResponseCommentView({
          model: comment
        });
        view.render();
        this.$el.find(".comments .new-comment").before(view.el);
        view.bind("comment:edit", function(event) {
          if (_this.editView != null) {
            _this.cancelEdit(event);
          }
          _this.cancelCommentEdits();
          return _this.hideCommentForm();
        });
        view.bind("comment:cancel_edit", function() {
          return _this.showCommentForm();
        });
        this.commentViews.push(view);
        return view;
      };

      ThreadResponseView.prototype.submitComment = function(event) {
        var body, comment, url, view;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("comment-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("comment-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          abuse_flaggers: [],
          user_id: window.user.get("id"),
          id: "unsaved"
        });
        view = this.renderComment(comment);
        this.hideEditorChrome();
        this.trigger("comment:add", comment);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(response, textStatus) {
            comment.set(response.content);
            comment.updateInfo(response.annotated_content_info);
            return view.render();
          }
        });
      };

      ThreadResponseView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm(gettext("Are you sure you want to delete this response?"))) {
          return;
        }
        url = this.model.urlFor('_delete');
        this.model.remove();
        this.$el.remove();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      ThreadResponseView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new ThreadResponseEditView({
          model: this.model
        });
        this.editView.bind("response:update", this.update);
        return this.editView.bind("response:cancel_edit", this.cancelEdit);
      };

      ThreadResponseView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.discussion-response'));
        view.render();
        return view.delegateEvents();
      };

      ThreadResponseView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      ThreadResponseView.prototype.cancelCommentEdits = function() {
        return _.each(this.commentViews, function(view) {
          return view.cancelEdit();
        });
      };

      ThreadResponseView.prototype.hideCommentForm = function() {
        return this.$('.comment-form').closest('li').hide();
      };

      ThreadResponseView.prototype.showCommentForm = function() {
        return this.$('.comment-form').closest('li').show();
      };

      ThreadResponseView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new ThreadResponseShowView({
          model: this.model
        });
        this.showView.bind("response:_delete", this._delete);
        return this.showView.bind("response:edit", this.edit);
      };

      ThreadResponseView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      ThreadResponseView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        this.renderShowView();
        return this.showCommentForm();
      };

      ThreadResponseView.prototype.edit = function(event) {
        this.createEditView();
        this.renderEditView();
        this.cancelCommentEdits();
        return this.hideCommentForm();
      };

      ThreadResponseView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_comment', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              body: newBody
            });
            _this.createShowView();
            _this.renderShowView();
            return _this.showCommentForm();
          }
        });
      };

      return ThreadResponseView;

    })(DiscussionContentView);
  }

}).call(this);
